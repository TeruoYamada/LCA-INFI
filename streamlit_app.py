import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import geopandas as gpd
import matplotlib.dates as mdates
import requests
import io
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Qualidade do Ar - MS",
    page_icon="üå¨Ô∏è",
    layout="wide"
)

# T√≠tulo e introdu√ß√£o
st.title("üå¨Ô∏è Sistema de Monitoramento da Qualidade do Ar - Mato Grosso do Sul")
st.markdown("""
Este aplicativo permite visualizar, analisar e gerar relat√≥rios sobre a qualidade do ar
nos munic√≠pios de Mato Grosso do Sul, seguindo os padr√µes da Resolu√ß√£o CONAMA n¬∫ 491/2018 e da OMS.
""")

# Fun√ß√£o para carregar os munic√≠pios de MS
@st.cache_data
def load_ms_municipalities():
    try:
        # URL para o shapefile dos munic√≠pios do MS
        url = "https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2022/UFs/MS/MS_Municipios_2022.zip"
        
        try:
            gdf = gpd.read_file(url)
            return gdf
        except Exception as e:
            st.warning(f"Erro ao carregar shapefile: {str(e)}")
            # Criar um geodataframe simplificado com alguns munic√≠pios
            data = {
                'NM_MUN': ['Campo Grande', 'Dourados', 'Tr√™s Lagoas', 'Corumb√°', 'Ponta Por√£',
                          'Navira√≠', 'Nova Andradina', 'Aquidauana', 'Maracaju', 'Parana√≠ba'],
                'geometry': [
                    gpd.points_from_xy([-54.6201], [-20.4697])[0].buffer(0.2),
                    gpd.points_from_xy([-54.812], [-22.2231])[0].buffer(0.2),
                    gpd.points_from_xy([-51.7005], [-20.7849])[0].buffer(0.2),
                    gpd.points_from_xy([-57.651], [-19.0082])[0].buffer(0.2),
                    gpd.points_from_xy([-55.7271], [-22.5334])[0].buffer(0.2),
                    gpd.points_from_xy([-54.1994], [-23.0624])[0].buffer(0.2),
                    gpd.points_from_xy([-53.3435], [-22.2384])[0].buffer(0.2),
                    gpd.points_from_xy([-55.7879], [-20.4697])[0].buffer(0.2),
                    gpd.points_from_xy([-55.1678], [-21.6407])[0].buffer(0.2),
                    gpd.points_from_xy([-51.1909], [-19.6746])[0].buffer(0.2)
                ]
            }
            gdf = gpd.GeoDataFrame(data, crs="EPSG:4326")
            return gdf
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel carregar os munic√≠pios: {str(e)}")
        return gpd.GeoDataFrame(columns=['NM_MUN', 'geometry'], crs="EPSG:4326")

# Fun√ß√£o para simular/obter dados de qualidade do ar
def get_air_quality_data(municipalities, start_date, end_date):
    """
    Simula ou obt√©m dados de qualidade do ar para os munic√≠pios selecionados
    no per√≠odo especificado. Em um ambiente de produ√ß√£o, substituir por
    chamadas a APIs reais de qualidade do ar.
    """
    # Lista de poluentes
    pollutants = ['MP10', 'MP2.5', 'O3', 'NO2', 'SO2', 'CO']
    
    # Criar DataFrame com datas no per√≠odo
    date_range = pd.date_range(start=start_date, end=end_date, freq='D')
    
    # Lista para armazenar os dados
    data_list = []
    
    # Para cada munic√≠pio e data, gerar dados simulados
    for municipality in municipalities:
        # Seed baseado no nome do munic√≠pio para gerar dados consistentes
        seed = sum(ord(c) for c in municipality)
        np.random.seed(seed)
        
        # Gerar base para o munic√≠pio (valores m√©dios)
        base_values = {
            'MP10': np.random.uniform(20, 60),
            'MP2.5': np.random.uniform(10, 30),
            'O3': np.random.uniform(40, 100),
            'NO2': np.random.uniform(20, 60),
            'SO2': np.random.uniform(10, 40),
            'CO': np.random.uniform(1, 5)
        }
        
        # Tend√™ncia ao longo do tempo (para simular varia√ß√£o sazonal)
        trend_factor = np.random.uniform(0.8, 1.2, size=len(date_range))
        
        for i, date in enumerate(date_range):
            # Aplicar tend√™ncia e varia√ß√£o di√°ria
            daily_values = {
                pollutant: max(0, base_values[pollutant] * trend_factor[i] * 
                             np.random.uniform(0.8, 1.2))
                for pollutant in pollutants
            }
            
            # Adicionar √† lista de dados
            data_list.append({
                'Munic√≠pio': municipality,
                'Data': date,
                **daily_values
            })
    
    # Criar DataFrame
    df = pd.DataFrame(data_list)
    return df

# Fun√ß√£o para classificar a qualidade do ar conforme CONAMA 491/2018
def classify_air_quality_conama(df):
    """
    Classifica a qualidade do ar conforme a Resolu√ß√£o CONAMA n¬∫ 491/2018
    """
    # Limites definidos pela Resolu√ß√£o CONAMA n¬∫ 491/2018 (valores simplificados)
    limits_conama = {
        'MP10': [50, 100, 150, 250, 250],  # Œºg/m¬≥ - m√©dia de 24h
        'MP2.5': [25, 50, 75, 125, 125],   # Œºg/m¬≥ - m√©dia de 24h
        'O3': [100, 130, 160, 200, 200],   # Œºg/m¬≥ - m√©dia de 8h
        'NO2': [200, 240, 320, 1130, 1130], # Œºg/m¬≥ - m√©dia de 1h
        'SO2': [20, 40, 365, 800, 800],    # Œºg/m¬≥ - m√©dia de 24h
        'CO': [9, 11, 13, 15, 15]          # ppm - m√©dia de 8h
    }
    
    # Categorias de qualidade
    categories = ['Boa', 'Moderada', 'Ruim', 'Muito Ruim', 'P√©ssima']
    colors = ['#00ccff', '#009933', '#ffff00', '#ff9933', '#ff0000', '#990000']
    
    # Criar c√≥pia para n√£o modificar o original
    result_df = df.copy()
    
    # Adicionar classifica√ß√£o para cada poluente
    for pollutant, limits in limits_conama.items():
        category_col = f'Categoria_{pollutant}'
        result_df[category_col] = 'Boa'
        
        for i, limit in enumerate(limits):
            if i == 0:
                # Boa: at√© o primeiro limite
                result_df.loc[result_df[pollutant] <= limit, category_col] = categories[0]
            elif i < len(limits) - 1:
                # Categorias intermedi√°rias
                result_df.loc[(result_df[pollutant] > limits[i-1]) & 
                            (result_df[pollutant] <= limit), 
                            category_col] = categories[i]
            else:
                # √öltima categoria: acima do pen√∫ltimo limite
                result_df.loc[result_df[pollutant] > limits[i-1], 
                            category_col] = categories[i]
    
    # Determinar categoria geral (pior caso)
    category_cols = [f'Categoria_{p}' for p in limits_conama.keys()]
    
    # Fun√ß√£o para obter o √≠ndice da categoria
    def category_index(cat):
        try:
            return categories.index(cat)
        except ValueError:
            return 0
    
    # Aplicar fun√ß√£o para encontrar a pior categoria
    result_df['Categoria_Geral'] = result_df[category_cols].apply(
        lambda row: categories[max(category_index(cat) for cat in row)], axis=1
    )
    
    # Adicionar coluna de cor
    result_df['Cor'] = result_df['Categoria_Geral'].apply(
        lambda cat: colors[categories.index(cat)]
    )
    
    return result_df

# Fun√ß√£o para classificar a qualidade do ar conforme OMS
def classify_air_quality_who(df):
    """
    Classifica a qualidade do ar conforme as diretrizes da OMS (2021)
    """
    # Limites definidos pela OMS (2021) - valores simplificados
    limits_who = {
        'MP10': [15, 45, 75, 150, 150],    # Œºg/m¬≥ - m√©dia de 24h
        'MP2.5': [5, 15, 25, 50, 50],      # Œºg/m¬≥ - m√©dia de 24h
        'O3': [60, 100, 140, 180, 180],    # Œºg/m¬≥ - m√©dia de 8h
        'NO2': [25, 50, 100, 200, 200],    # Œºg/m¬≥ - m√©dia de 24h
        'SO2': [40, 80, 160, 350, 350],    # Œºg/m¬≥ - m√©dia de 24h
        'CO': [4, 9, 13, 15, 15]           # ppm - m√©dia de 8h
    }
    
    # Categorias de qualidade
    categories = ['Boa', 'Moderada', 'Ruim', 'Muito Ruim', 'P√©ssima']
    colors = ['#00ccff', '#009933', '#ffff00', '#ff9933', '#ff0000', '#990000']
    
    # Criar c√≥pia para n√£o modificar o original
    result_df = df.copy()
    
    # Adicionar classifica√ß√£o para cada poluente
    for pollutant, limits in limits_who.items():
        category_col = f'Categoria_WHO_{pollutant}'
        result_df[category_col] = 'Boa'
        
        for i, limit in enumerate(limits):
            if i == 0:
                # Boa: at√© o primeiro limite
                result_df.loc[result_df[pollutant] <= limit, category_col] = categories[0]
            elif i < len(limits) - 1:
                # Categorias intermedi√°rias
                result_df.loc[(result_df[pollutant] > limits[i-1]) & 
                            (result_df[pollutant] <= limit), 
                            category_col] = categories[i]
            else:
                # √öltima categoria: acima do pen√∫ltimo limite
                result_df.loc[result_df[pollutant] > limits[i-1], 
                            category_col] = categories[i]
    
    # Determinar categoria geral (pior caso)
    category_cols = [f'Categoria_WHO_{p}' for p in limits_who.keys()]
    
    # Fun√ß√£o para obter o √≠ndice da categoria
    def category_index(cat):
        try:
            return categories.index(cat)
        except ValueError:
            return 0
    
    # Aplicar fun√ß√£o para encontrar a pior categoria
    result_df['Categoria_Geral_WHO'] = result_df[category_cols].apply(
        lambda row: categories[max(category_index(cat) for cat in row)], axis=1
    )
    
    # Adicionar coluna de cor
    result_df['Cor_WHO'] = result_df['Categoria_Geral_WHO'].apply(
        lambda cat: colors[categories.index(cat)]
    )
    
    return result_df

# Fun√ß√£o para criar gr√°fico da s√©rie temporal
def create_time_series_plot(df, municipality, standard='CONAMA'):
    """
    Cria um gr√°fico interativo de s√©rie temporal para o munic√≠pio selecionado
    """
    # Filtrar dados para o munic√≠pio
    mun_data = df[df['Munic√≠pio'] == municipality].sort_values('Data')
    
    # Selecionar as colunas de categoria e cor apropriadas
    if standard == 'CONAMA':
        cat_col = 'Categoria_Geral'
        color_col = 'Cor'
    else:  # WHO
        cat_col = 'Categoria_Geral_WHO'
        color_col = 'Cor_WHO'
    
    # Criar subplots - um para cada poluente
    pollutants = ['MP10', 'MP2.5', 'O3', 'NO2', 'SO2', 'CO']
    fig = make_subplots(rows=3, cols=2, subplot_titles=pollutants,
                       shared_xaxes=True, vertical_spacing=0.1)
    
    # Adicionar gr√°ficos para cada poluente
    for i, pollutant in enumerate(pollutants):
        row = i // 2 + 1
        col = i % 2 + 1
        
        # Adicionar s√©rie temporal
        fig.add_trace(
            go.Scatter(
                x=mun_data['Data'],
                y=mun_data[pollutant],
                mode='lines+markers',
                name=pollutant,
                line=dict(width=2),
                marker=dict(size=6),
                hovertemplate=f"{pollutant}: %{{y:.1f}}<br>Data: %{{x|%d/%m/%Y}}<br>Categoria: {mun_data[f'Categoria_{pollutant}' if standard=='CONAMA' else f'Categoria_WHO_{pollutant}']}"
            ),
            row=row, col=col
        )
        
        # Adicionar limites (simplificado - apenas o primeiro limite para "Boa")
        if standard == 'CONAMA':
            limits = {
                'MP10': 50,
                'MP2.5': 25,
                'O3': 100,
                'NO2': 200,
                'SO2': 20,
                'CO': 9
            }
        else:  # WHO
            limits = {
                'MP10': 15,
                'MP2.5': 5,
                'O3': 60,
                'NO2': 25,
                'SO2': 40,
                'CO': 4
            }
        
        # Adicionar linha de limite
        fig.add_trace(
            go.Scatter(
                x=[mun_data['Data'].min(), mun_data['Data'].max()],
                y=[limits[pollutant], limits[pollutant]],
                mode='lines',
                line=dict(color='red', width=1, dash='dash'),
                name=f"Limite {pollutant}",
                showlegend=False
            ),
            row=row, col=col
        )
    
    # Atualizar layout
    fig.update_layout(
        title=f"S√©rie Temporal de Poluentes - {municipality} (Padr√£o: {standard})",
        height=800,
        width=1000,
        showlegend=False,
        template="plotly_white"
    )
    
    # Atualizar t√≠tulos dos eixos
    units = {
        'MP10': 'Œºg/m¬≥',
        'MP2.5': 'Œºg/m¬≥',
        'O3': 'Œºg/m¬≥',
        'NO2': 'Œºg/m¬≥',
        'SO2': 'Œºg/m¬≥',
        'CO': 'ppm'
    }
    
    for i, pollutant in enumerate(pollutants):
        row = i // 2 + 1
        col = i % 2 + 1
        fig.update_yaxes(title_text=units[pollutant], row=row, col=col)
        
        if row == 3:  # √öltima linha
            fig.update_xaxes(title_text="Data", row=row, col=col)
    
    return fig

# Fun√ß√£o para gerar mapa de qualidade do ar
def create_air_quality_map(df, gdf, date, standard='CONAMA'):
    """
    Cria um mapa interativo com a qualidade do ar para todos os munic√≠pios em uma data espec√≠fica
    Usando uma abordagem alternativa com go.Figure para evitar problemas com px.choropleth_mapbox
    """
    # Filtrar dados para a data
    date_data = df[df['Data'] == date]
    
    # Selecionar as colunas de categoria e cor apropriadas
    if standard == 'CONAMA':
        cat_col = 'Categoria_Geral'
        color_col = 'Cor'
    else:  # WHO
        cat_col = 'Categoria_Geral_WHO'
        color_col = 'Cor_WHO'
    
    # Mesclar dados com o geodataframe
    map_data = gdf.merge(date_data, left_on='NM_MUN', right_on='Munic√≠pio', how='inner')
    
    # Verificar se h√° dados para criar o mapa
    if map_data.empty:
        st.warning(f"N√£o h√° dados de qualidade do ar dispon√≠veis para {date.strftime('%d/%m/%Y')}")
        return None
    
    # Criar uma figura b√°sica com scatter_mapbox (alternativa mais est√°vel)
    fig = go.Figure()
    
    # Cores para as categorias
    color_map = {
        'Boa': '#00ccff',
        'Moderada': '#009933',
        'Ruim': '#ffff00',
        'Muito Ruim': '#ff9933',
        'P√©ssima': '#ff0000'
    }
    
    # Adicionar pontos para cada munic√≠pio
    for idx, row in map_data.iterrows():
        # Obter a categoria de qualidade do ar e a cor correspondente
        category = row[cat_col]
        color = color_map.get(category, '#cccccc')
        
        # Obter o centroide da geometria para posicionar o ponto
        try:
            # Se a geometria for um pol√≠gono, extrair o centroide
            if hasattr(row.geometry, 'centroid'):
                lon, lat = row.geometry.centroid.x, row.geometry.centroid.y
            # Se for um ponto (caso do fallback), usar as coordenadas diretamente
            elif hasattr(row.geometry, 'x') and hasattr(row.geometry, 'y'):
                lon, lat = row.geometry.x, row.geometry.y
            else:
                # Usar coordenadas extra√≠das dos dados simulados como fallback
                city_coords = {
                    'Campo Grande': [-20.4697, -54.6201],
                    'Dourados': [-22.2231, -54.812],
                    'Tr√™s Lagoas': [-20.7849, -51.7005],
                    'Corumb√°': [-19.0082, -57.651],
                    'Ponta Por√£': [-22.5334, -55.7271],
                    'Navira√≠': [-23.0624, -54.1994],
                    'Nova Andradina': [-22.2384, -53.3435],
                    'Aquidauana': [-20.4697, -55.7879],
                    'Maracaju': [-21.6407, -55.1678],
                    'Parana√≠ba': [-19.6746, -51.1909]
                }
                if row['Munic√≠pio'] in city_coords:
                    lat, lon = city_coords[row['Munic√≠pio']]
                else:
                    # Skip if we can't determine coordinates
                    continue
            
            # Criar texto para hover
            hover_text = f"<b>{row['Munic√≠pio']}</b><br>" + \
                        f"Qualidade do Ar: {category}<br>" + \
                        f"MP10: {row['MP10']:.2f} Œºg/m¬≥<br>" + \
                        f"MP2.5: {row['MP2.5']:.2f} Œºg/m¬≥<br>" + \
                        f"O3: {row['O3']:.2f} Œºg/m¬≥<br>" + \
                        f"NO2: {row['NO2']:.2f} Œºg/m¬≥<br>" + \
                        f"SO2: {row['SO2']:.2f} Œºg/m¬≥<br>" + \
                        f"CO: {row['CO']:.2f} ppm"
            
            # Adicionar marker
            fig.add_trace(go.Scattermapbox(
                lat=[lat],
                lon=[lon],
                mode='markers',
                marker=dict(
                    size=15,
                    color=color,
                    opacity=0.8
                ),
                text=row['Munic√≠pio'],
                hoverinfo='text',
                hovertext=hover_text,
                name=row['Munic√≠pio']
            ))
        except Exception as e:
            st.warning(f"Erro ao processar munic√≠pio {row['Munic√≠pio']}: {str(e)}")
            continue
    
    # Configurar o layout do mapa
    fig.update_layout(
        title=f"Mapa de Qualidade do Ar - {date.strftime('%d/%m/%Y')} (Padr√£o: {standard})",
        mapbox=dict(
            style="carto-positron",
            zoom=5,
            center={"lat": -20.5, "lon": -54.6},
        ),
        height=600,
        margin={"r":0,"t":50,"l":0,"b":0},
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    # Adicionar legenda manualmente
    legend_categories = list(color_map.keys())
    for i, category in enumerate(legend_categories):
        fig.add_trace(go.Scattermapbox(
            lat=[None],
            lon=[None],
            mode='markers',
            marker=dict(size=10, color=color_map[category]),
            name=category,
            showlegend=True
        ))
    
    return fig

# Fun√ß√£o para gerar relat√≥rio de qualidade do ar
def generate_air_quality_report(df, municipality, start_date, end_date, standard='CONAMA'):
    """
    Gera um relat√≥rio de qualidade do ar para um munic√≠pio espec√≠fico
    """
    # Filtrar dados para o munic√≠pio e per√≠odo
    mun_data = df[(df['Munic√≠pio'] == municipality) & 
                 (df['Data'] >= start_date) & 
                 (df['Data'] <= end_date)].sort_values('Data')
    
    # Selecionar as colunas de categoria e cor apropriadas
    if standard == 'CONAMA':
        cat_col = 'Categoria_Geral'
        color_col = 'Cor'
        prefix = ''
    else:  # WHO
        cat_col = 'Categoria_Geral_WHO'
        color_col = 'Cor_WHO'
        prefix = 'WHO_'
    
    # Calcular estat√≠sticas
    stats = {}
    pollutants = ['MP10', 'MP2.5', 'O3', 'NO2', 'SO2', 'CO']
    
    for pollutant in pollutants:
        stats[pollutant] = {
            'M√©dia': mun_data[pollutant].mean(),
            'M√°ximo': mun_data[pollutant].max(),
            'M√≠nimo': mun_data[pollutant].min(),
            'Desvio Padr√£o': mun_data[pollutant].std()
        }
    
    # Contar ocorr√™ncias de cada categoria
    cat_counts = mun_data[cat_col].value_counts().to_dict()
    
    # Identificar o poluente mais cr√≠tico
    worst_days = {}
    for pollutant in pollutants:
        cat_col_poll = f'Categoria_{prefix}{pollutant}'
        worst_idx = mun_data[cat_col_poll].map(
            {'Boa': 0, 'Moderada': 1, 'Ruim': 2, 'Muito Ruim': 3, 'P√©ssima': 4}
        ).idxmax()
        
        if not pd.isna(worst_idx):
            worst_day = mun_data.loc[worst_idx]
            worst_days[pollutant] = {
                'Data': worst_day['Data'],
                'Valor': worst_day[pollutant],
                'Categoria': worst_day[cat_col_poll]
            }
    
    # Criar o relat√≥rio
    report = {
        'Munic√≠pio': municipality,
        'Per√≠odo': {
            'In√≠cio': start_date,
            'Fim': end_date,
            'Total de Dias': (end_date - start_date).days + 1
        },
        'Padr√£o': 'CONAMA 491/2018' if standard == 'CONAMA' else 'OMS (2021)',
        'Estat√≠sticas': stats,
        'Categorias': cat_counts,
        'Dias Cr√≠ticos': worst_days
    }
    
    return report

# Carregar munic√≠pios
ms_municipalities = load_ms_municipalities()
municipalities_list = sorted(ms_municipalities['NM_MUN'].unique().tolist())

# Sidebar para configura√ß√µes
st.sidebar.header("‚öôÔ∏è Configura√ß√µes")

# Sele√ß√£o de munic√≠pios
selected_municipalities = st.sidebar.multiselect(
    "Selecione os munic√≠pios",
    options=municipalities_list,
    default=[municipalities_list[0]] if municipalities_list else []
)

# Per√≠odo de an√°lise
st.sidebar.subheader("Per√≠odo de An√°lise")
start_date = st.sidebar.date_input(
    "Data de In√≠cio",
    datetime.now() - timedelta(days=30)
)
end_date = st.sidebar.date_input(
    "Data Final",
    datetime.now()
)

# Padr√£o de qualidade do ar
standard = st.sidebar.radio(
    "Padr√£o de Qualidade do Ar",
    options=["CONAMA", "OMS"],
    help="CONAMA: Resolu√ß√£o n¬∫ 491/2018 | OMS: Diretrizes da OMS (2021)"
)

# Verificar sele√ß√µes
if not selected_municipalities:
    st.warning("‚ö†Ô∏è Por favor, selecione pelo menos um munic√≠pio.")
    st.stop()

if start_date > end_date:
    st.error("‚ùå A data de in√≠cio deve ser anterior √† data final.")
    st.stop()

# Obter dados de qualidade do ar
with st.spinner("üîÑ Carregando dados de qualidade do ar..."):
    air_data = get_air_quality_data(selected_municipalities, start_date, end_date)
    
    # Classificar qualidade do ar
    if standard == "CONAMA":
        air_data = classify_air_quality_conama(air_data)
    else:  # WHO
        air_data = classify_air_quality_who(air_data)

# Layout principal - usar abas
tab1, tab2, tab3, tab4 = st.tabs([
    "üìä Vis√£o Geral", 
    "üìà S√©ries Temporais", 
    "üó∫Ô∏è Mapa de Qualidade do Ar",
    "üìù Relat√≥rios"
])

with tab1:
    st.header("üìä Vis√£o Geral da Qualidade do Ar")
    
    # Mostrar estat√≠sticas gerais
    st.subheader("Estat√≠sticas do Per√≠odo")
    
    # Criar m√©tricas por munic√≠pio
    for municipality in selected_municipalities:
        st.markdown(f"### üèôÔ∏è {municipality}")
        
        # Filtrar dados para o munic√≠pio
        mun_data = air_data[air_data['Munic√≠pio'] == municipality]
        
        # Mostrar categoria predominante
        if standard == "CONAMA":
            cat_counts = mun_data['Categoria_Geral'].value_counts()
            predominant_cat = cat_counts.index[0] if not cat_counts.empty else "N/A"
            cat_color = mun_data[mun_data['Categoria_Geral'] == predominant_cat]['Cor'].iloc[0] if not mun_data.empty else "#CCCCCC"
        else:  # WHO
            cat_counts = mun_data['Categoria_Geral_WHO'].value_counts()
            predominant_cat = cat_counts.index[0] if not cat_counts.empty else "N/A"
            cat_color = mun_data[mun_data['Categoria_Geral_WHO'] == predominant_cat]['Cor_WHO'].iloc[0] if not mun_data.empty else "#CCCCCC"
        
        # Criar colunas para m√©tricas
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"""
            <div style="padding:10px; border-radius:5px; background-color:{cat_color}; color:white; text-align:center; margin:5px 0;">
            <h4 style="margin:0;">Qualidade Predominante: {predominant_cat}</h4>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            # Mostrar pior dia
            if standard == "CONAMA":
                worst_day_idx = mun_data['Categoria_Geral'].map({
                    'Boa': 0, 'Moderada': 1, 'Ruim': 2, 'Muito Ruim': 3, 'P√©ssima': 4
                }).idxmax()
            else:  # WHO
                worst_day_idx = mun_data['Categoria_Geral_WHO'].map({
                    'Boa': 0, 'Moderada': 1, 'Ruim': 2, 'Muito Ruim': 3, 'P√©ssima': 4
                }).idxmax()
            
            if not pd.isna(worst_day_idx) and not mun_data.empty:
                worst_day = mun_data.loc[worst_day_idx]
                worst_date = worst_day['Data'].strftime('%d/%m/%Y')
                worst_cat = worst_day['Categoria_Geral'] if standard == "CONAMA" else worst_day['Categoria_Geral_WHO']
                st.metric("Pior Dia", f"{worst_date} ({worst_cat})")
            else:
                st.metric("Pior Dia", "N/A")
        
        with col3:
            # Calcular m√©dia dos poluentes
            pollutants = ['MP10', 'MP2.5', 'O3', 'NO2', 'SO2', 'CO']
            avg_values = {p: mun_data[p].mean() for p in pollutants}
            # Encontrar o poluente com maior valor em rela√ß√£o ao limite
            if standard == "CONAMA":
                limits = {
                    'MP10': 50, 'MP2.5': 25, 'O3': 100,
                    'NO2': 200, 'SO2': 20, 'CO': 9
                }
            else:  # WHO
                limits = {
                    'MP10': 15, 'MP2.5': 5, 'O3': 60,
                    'NO2': 25, 'SO2': 40, 'CO': 4
                }
            
            ratios = {p: avg_values[p] / limits[p] for p in pollutants}
            worst_pollutant = max(ratios, key=ratios.get)
            st.metric("Poluente Cr√≠tico", f"{worst_pollutant} ({avg_values[worst_pollutant]:.1f})")
        
        # Mostrar distribui√ß√£o de categorias
        st.subheader(f"Distribui√ß√£o de Qualidade do Ar - {municipality}")
        
        if standard == "CONAMA":
            cat_col = 'Categoria_Geral'
        else:  # WHO
            cat_col = 'Categoria_Geral_WHO'
        
        categories = ['Boa', 'Moderada', 'Ruim', 'Muito Ruim', 'P√©ssima']
        colors = ['#00ccff', '#009933', '#ffff00', '#ff9933', '#ff0000']
        
        # Contar ocorr√™ncias de cada categoria
        cat_data = mun_data[cat_col].value_counts().reindex(categories, fill_value=0)
        
        # Criar gr√°fico
        fig = px.bar(
            x=cat_data.index,
            y=cat_data.values,
            labels={'x': 'Categoria', 'y': 'N√∫mero de Dias'},
            title=f"Distribui√ß√£o de Categorias de Qualidade do Ar - {municipality} (Padr√£o: {standard})"
        )
        
        # Definir cores
        fig.update_traces(marker_color=colors)
        fig.update_layout(xaxis_title="Categoria", yaxis_title="N√∫mero de Dias")
        
        st.plotly_chart(fig)
        
        # Adicionar separador
        st.markdown("---")

with tab2:
    st.header("üìà S√©ries Temporais")
    
    # Selecionar munic√≠pio para an√°lise detalhada
    selected_mun = st.selectbox(
        "Selecione um munic√≠pio para an√°lise detalhada",
        options=selected_municipalities
    )
    
    # Criar gr√°fico de s√©rie temporal
    with st.spinner("Gerando s√©rie temporal..."):
        fig = create_time_series_plot(air_data, selected_mun, standard)
        st.plotly_chart(fig, use_container_width=True)
    
    # Resumo dos poluentes
    st.subheader("Resumo dos Poluentes")
    
    # Filtrar dados para o munic√≠pio
    mun_data = air_data[air_data['Munic√≠pio'] == selected_mun]
    
    # Criar tabela de resumo
    pollutants = ['MP10', 'MP2.5', 'O3', 'NO2', 'SO2', 'CO']
    summary_data = []
    
    for pollutant in pollutants:
        # Obter estat√≠sticas
        mean_val = mun_data[pollutant].mean()
        max_val = mun_data[pollutant].max()
        min_val = mun_data[pollutant].min()
        std_val = mun_data[pollutant].std()
        
        # Obter limites
        if standard == "CONAMA":
            limit = {
                'MP10': 50, 'MP2.5': 25, 'O3': 100,
                'NO2': 200, 'SO2': 20, 'CO': 9
            }[pollutant]
            
            cat_col = f'Categoria_{pollutant}'
        else:  # WHO
            limit = {
                'MP10': 15, 'MP2.5': 5, 'O3': 60,
                'NO2': 25, 'SO2': 40, 'CO': 4
            }[pollutant]
            
            cat_col = f'Categoria_WHO_{pollutant}'
        
        # Calcular exced√™ncias
        exceedances = (mun_data[pollutant] > limit).sum()
        exceedance_pct = exceedances / len(mun_data) * 100
        
        # Categoria predominante
        cat_counts = mun_data[cat_col].value_counts()
        predominant_cat = cat_counts.index[0] if not cat_counts.empty else "N/A"
        
        # Adicionar unidades
        units = {
            'MP10': 'Œºg/m¬≥', 'MP2.5': 'Œºg/m¬≥', 'O3': 'Œºg/m¬≥',
            'NO2': 'Œºg/m¬≥', 'SO2': 'Œºg/m¬≥', 'CO': 'ppm'
        }[pollutant]
        
        # Adicionar √† lista
        summary_data.append({
            'Poluente': pollutant,
            'M√©dia': f"{mean_val:.2f} {units}",
            'M√°ximo': f"{max_val:.2f} {units}",
            'M√≠nimo': f"{min_val:.2f} {units}",
            'Desvio Padr√£o': f"{std_val:.2f}",
            'Exced√™ncias': f"{exceedances} dias ({exceedance_pct:.1f}%)",
            'Categoria Predominante': predominant_cat
        })
    
    # Criar dataframe
    summary_df = pd.DataFrame(summary_data)
    
    # Mostrar tabela
    st.dataframe(summary_df, use_container_width=True)
    
    # Op√ß√£o para download dos dados
    st.download_button(
        label="‚¨áÔ∏è Baixar Dados Completos (CSV)",
        data=mun_data.to_csv(index=False).encode('utf-8'),
        file_name=f"qualidade_ar_{selected_mun}_{start_date}_a_{end_date}.csv",
        mime="text/csv"
    )

with tab3:
    st.header("üó∫Ô∏è Mapa de Qualidade do Ar")
    
    # Selecionar data para o mapa
    selected_date = st.date_input(
        "Selecione uma data para visualizar o mapa",
        value=pd.to_datetime(air_data['Data'].min()).date()
    )
    
    # Converter para datetime
    selected_datetime = pd.to_datetime(selected_date)
    
    # Verificar se h√° dados para a data
    if not air_data[air_data['Data'].dt.date == selected_date].empty:
        # Criar mapa
        with st.spinner("Gerando mapa..."):
            fig = create_air_quality_map(air_data, ms_municipalities, selected_datetime, standard)
            st.plotly_chart(fig, use_container_width=True)
            
            # Adicionar legenda
            st.markdown("""
            ### Legenda de Qualidade do Ar
            - üîµ **Boa**: Qualidade do ar satisfat√≥ria, com m√≠nimo ou nenhum risco √† sa√∫de.
            - üü¢ **Moderada**: Qualidade do ar aceit√°vel, mas pode haver risco para pessoas muito sens√≠veis.
            - üü° **Ruim**: Membros de grupos sens√≠veis podem ter efeitos na sa√∫de.
            - üü† **Muito Ruim**: Todos podem come√ßar a sentir efeitos na sa√∫de, grupos sens√≠veis podem ter efeitos mais graves.
            - üî¥ **P√©ssima**: Alerta de sa√∫de. Toda a popula√ß√£o pode ter riscos de sa√∫de mais s√©rios.
            """)
    else:
        st.warning(f"N√£o h√° dados dispon√≠veis para a data {selected_date.strftime('%d/%m/%Y')}.")

with tab4:
    st.header("üìù Relat√≥rios de Qualidade do Ar")
    
    # Selecionar munic√≠pio para relat√≥rio
    report_mun = st.selectbox(
        "Selecione um munic√≠pio para gerar relat√≥rio",
        options=selected_municipalities,
        key="report_municipality"
    )
    
    # Gerar relat√≥rio
    if st.button("üîç Gerar Relat√≥rio Detalhado"):
        with st.spinner("Gerando relat√≥rio..."):
            report = generate_air_quality_report(air_data, report_mun, start_date, end_date, standard)
            
            # Mostrar relat√≥rio
            st.subheader(f"Relat√≥rio de Qualidade do Ar - {report_mun}")
            st.markdown(f"""
            ### Informa√ß√µes Gerais
            - **Munic√≠pio**: {report['Munic√≠pio']}
            - **Per√≠odo**: {report['Per√≠odo']['In√≠cio'].strftime('%d/%m/%Y')} a {report['Per√≠odo']['Fim'].strftime('%d/%m/%Y')} ({report['Per√≠odo']['Total de Dias']} dias)
            - **Padr√£o Utilizado**: {report['Padr√£o']}
            """)
            
            # Mostrar distribui√ß√£o de categorias
            st.subheader("Distribui√ß√£o de Categorias")
            
            # Criar gr√°fico de pizza
            categories = ['Boa', 'Moderada', 'Ruim', 'Muito Ruim', 'P√©ssima']
            colors = ['#00ccff', '#009933', '#ffff00', '#ff9933', '#ff0000']
            
            cat_values = []
            for cat in categories:
                cat_values.append(report['Categorias'].get(cat, 0))
            
            fig = px.pie(
                values=cat_values,
                names=categories,
                title=f"Distribui√ß√£o de Categorias - {report_mun}",
                color_discrete_sequence=colors
            )
            st.plotly_chart(fig)
            
            # Estat√≠sticas dos poluentes
            st.subheader("Estat√≠sticas por Poluente")
            
            # Criar colunas para cada poluente
            cols = st.columns(3)
            pollutants = list(report['Estat√≠sticas'].keys())
            
            for i, pollutant in enumerate(pollutants):
                col_idx = i % 3
                with cols[col_idx]:
                    stats = report['Estat√≠sticas'][pollutant]
                    
                    # Obter unidade
                    unit = 'ppm' if pollutant == 'CO' else 'Œºg/m¬≥'
                    
                    st.markdown(f"""
                    #### {pollutant}
                    - **M√©dia**: {stats['M√©dia']:.2f} {unit}
                    - **M√°ximo**: {stats['M√°ximo']:.2f} {unit}
                    - **M√≠nimo**: {stats['M√≠nimo']:.2f} {unit}
                    - **Desvio Padr√£o**: {stats['Desvio Padr√£o']:.2f}
                    """)
                    
                    # Adicionar dia cr√≠tico se dispon√≠vel
                    if pollutant in report['Dias Cr√≠ticos']:
                        critical_day = report['Dias Cr√≠ticos'][pollutant]
                        st.markdown(f"""
                        **Dia Cr√≠tico**: {critical_day['Data'].strftime('%d/%m/%Y')}  
                        **Valor**: {critical_day['Valor']:.2f} {unit}  
                        **Categoria**: {critical_day['Categoria']}
                        """)
            
            # Observa√ß√µes finais
            st.subheader("Recomenda√ß√µes e Observa√ß√µes")
            
            # Determinar recomenda√ß√µes com base na categoria predominante
            predominant_cat = max(report['Categorias'], key=report['Categorias'].get) if report['Categorias'] else "N/A"
            
            recommendations = {
                'Boa': """
                A qualidade do ar est√° satisfat√≥ria. Continue monitorando, mas n√£o s√£o necess√°rias medidas espec√≠ficas.
                """,
                'Moderada': """
                A qualidade do ar est√° aceit√°vel, mas pode haver riscos para pessoas muito sens√≠veis.
                - Pessoas com doen√ßas respirat√≥rias ou card√≠acas devem limitar esfor√ßos prolongados ao ar livre.
                - Recomenda-se continuar o monitoramento regular da qualidade do ar.
                """,
                'Ruim': """
                A qualidade do ar apresenta riscos para grupos sens√≠veis.
                - Pessoas com doen√ßas respirat√≥rias ou card√≠acas, idosos e crian√ßas devem evitar esfor√ßos prolongados ao ar livre.
                - Recomenda-se intensificar o monitoramento e implementar medidas de controle de emiss√µes.
                - Considerar campanhas de conscientiza√ß√£o sobre a qualidade do ar.
                """,
                'Muito Ruim': """
                A qualidade do ar est√° insalubre e pode afetar toda a popula√ß√£o.
                - Todos devem limitar atividades ao ar livre, especialmente grupos sens√≠veis.
                - Recomenda-se implementar medidas de controle de emiss√µes de forma urgente.
                - Considerar a emiss√£o de alertas de sa√∫de p√∫blica.
                - Intensificar a fiscaliza√ß√£o de fontes poluidoras.
                """,
                'P√©ssima': """
                A qualidade do ar est√° perigosa para a sa√∫de.
                - Todos devem evitar atividades ao ar livre.
                - Recomenda-se implementar medidas emergenciais de controle de polui√ß√£o.
                - Emitir alertas de sa√∫de p√∫blica e considerar a suspens√£o de atividades em escolas e locais p√∫blicos.
                - Implementar rod√≠zio de ve√≠culos se aplic√°vel.
                - Suspender atividades industriais com altas emiss√µes temporariamente.
                """
            }
            
            st.markdown(recommendations.get(predominant_cat, "N√£o h√° recomenda√ß√µes dispon√≠veis."))
            
            # Op√ß√£o para download do relat√≥rio em formato JSON
            report_json = json.dumps(
                {
                    'Munic√≠pio': report['Munic√≠pio'],
                    'Per√≠odo': {
                        'In√≠cio': report['Per√≠odo']['In√≠cio'].strftime('%d/%m/%Y'),
                        'Fim': report['Per√≠odo']['Fim'].strftime('%d/%m/%Y'),
                        'Total de Dias': report['Per√≠odo']['Total de Dias']
                    },
                    'Padr√£o': report['Padr√£o'],
                    'Categorias': report['Categorias'],
                    'Estat√≠sticas': {
                        p: {k: float(v) for k, v in stats.items()} 
                        for p, stats in report['Estat√≠sticas'].items()
                    },
                    'Dias Cr√≠ticos': {
                        p: {
                            'Data': day['Data'].strftime('%d/%m/%Y'),
                            'Valor': float(day['Valor']),
                            'Categoria': day['Categoria']
                        } 
                        for p, day in report['Dias Cr√≠ticos'].items()
                    },
                    'Recomenda√ß√µes': recommendations.get(predominant_cat, "N√£o h√° recomenda√ß√µes dispon√≠veis.")
                },
                ensure_ascii=False,
                indent=4
            )
            
            st.download_button(
                label="‚¨áÔ∏è Baixar Relat√≥rio (JSON)",
                data=report_json.encode('utf-8'),
                file_name=f"relatorio_{report_mun}_{start_date}_a_{end_date}.json",
                mime="application/json"
            )
            
            # Op√ß√£o para download do relat√≥rio em PDF (simula√ß√£o)
            st.markdown("""
            Para gerar relat√≥rios em PDF, seria necess√°rio implementar uma biblioteca adicional como ReportLab ou pdfkit.
            Esta funcionalidade pode ser adicionada em vers√µes futuras do aplicativo.
            """)

# Adicionar informa√ß√µes na parte inferior
st.markdown("---")
st.markdown("""
### ‚ÑπÔ∏è Sobre os Padr√µes de Qualidade do Ar

#### Resolu√ß√£o CONAMA n¬∫ 491/2018
A Resolu√ß√£o CONAMA n¬∫ 491/2018 estabelece os padr√µes de qualidade do ar no Brasil, definindo limites para concentra√ß√µes de poluentes atmosf√©ricos.

**Poluentes Regulamentados:**
- MP10 (Part√≠culas Inal√°veis): 50 Œºg/m¬≥ (m√©dia de 24h)
- MP2.5 (Part√≠culas Inal√°veis Finas): 25 Œºg/m¬≥ (m√©dia de 24h)
- O3 (Oz√¥nio): 100 Œºg/m¬≥ (m√©dia de 8h)
- NO2 (Di√≥xido de Nitrog√™nio): 200 Œºg/m¬≥ (m√©dia de 1h)
- SO2 (Di√≥xido de Enxofre): 20 Œºg/m¬≥ (m√©dia de 24h)
- CO (Mon√≥xido de Carbono): 9 ppm (m√©dia de 8h)

#### Diretrizes da OMS (2021)
A Organiza√ß√£o Mundial da Sa√∫de (OMS) atualizou suas diretrizes de qualidade do ar em 2021, estabelecendo limites mais restritivos.

**Limites Recomendados:**
- MP10 (Part√≠culas Inal√°veis): 15 Œºg/m¬≥ (m√©dia de 24h)
- MP2.5 (Part√≠culas Inal√°veis Finas): 5 Œºg/m¬≥ (m√©dia de 24h)
- O3 (Oz√¥nio): 60 Œºg/m¬≥ (m√©dia de 8h)
- NO2 (Di√≥xido de Nitrog√™nio): 25 Œºg/m¬≥ (m√©dia de 24h)
- SO2 (Di√≥xido de Enxofre): 40 Œºg/m¬≥ (m√©dia de 24h)
- CO (Mon√≥xido de Carbono): 4 ppm (m√©dia de 24h)

### üè• Efeitos na Sa√∫de

- **Boa**: Qualidade do ar satisfat√≥ria, com m√≠nimo ou nenhum risco √† sa√∫de.
- **Moderada**: Qualidade do ar aceit√°vel, mas pode haver risco para pessoas muito sens√≠veis.
- **Ruim**: Membros de grupos sens√≠veis podem ter efeitos na sa√∫de.
- **Muito Ruim**: Todos podem come√ßar a sentir efeitos na sa√∫de, grupos sens√≠veis podem ter efeitos mais graves.
- **P√©ssima**: Alerta de sa√∫de. Toda a popula√ß√£o pode ter riscos de sa√∫de mais s√©rios.

---

Desenvolvido para monitoramento da qualidade do ar no estado de Mato Grosso do Sul - Brasil.
""")
