import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import geopandas as gpd
import matplotlib.dates as mdates
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
import os
from datetime import datetime, timedelta
import requests
import io
from sklearn.linear_model import LinearRegression
from PIL import Image
import base64
import time
import cdsapi

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema Integrado de Qualidade do Ar - MS",
    page_icon="üå¨Ô∏è",
    layout="wide"
)

# T√≠tulo e introdu√ß√£o
st.title("üå¨Ô∏è Sistema Integrado de Monitoramento da Qualidade do Ar - Mato Grosso do Sul")
st.markdown("""
Este aplicativo permite monitorar e analisar a qualidade do ar nos munic√≠pios de Mato Grosso do Sul, 
integrando dados do Servi√ßo de Monitoramento da Atmosfera Copernicus (CAMS) para m√∫ltiplos poluentes 
atmosf√©ricos (MP10, MP2.5, O3, NO2, SO2, CO) e aeross√≥is (AOD).
Os dados s√£o classificados segundo os padr√µes da Resolu√ß√£o CONAMA n¬∫ 491/2018 e da OMS (2021).
""")

# Fun√ß√£o para carregar os munic√≠pios de MS
@st.cache_data
def load_ms_municipalities():
    try:
        # Tentativa de carregar shapefile online
        url = "https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2022/UFs/MS/MS_Municipios_2022.zip"
        
        try:
            gdf = gpd.read_file(url)
            return gdf
        except Exception as e:
            st.warning(f"Erro ao carregar shapefile online: {str(e)}")
            # Fallback: criar geodataframe simplificado
            data = {
                'NM_MUN': [
                    'Campo Grande', 'Dourados', 'Tr√™s Lagoas', 'Corumb√°', 'Ponta Por√£',
                    'Navira√≠', 'Nova Andradina', 'Aquidauana', 'Maracaju', 'Parana√≠ba',
                    'Sidrol√¢ndia', 'Coxim', 'Amambai', 'Rio Brilhante', 'Chapad√£o do Sul'
                ],
                'geometry': [
                    gpd.points_from_xy([-54.6201], [-20.4697])[0].buffer(0.2),
                    gpd.points_from_xy([-54.8120], [-22.2231])[0].buffer(0.2),
                    gpd.points_from_xy([-51.7005], [-20.7849])[0].buffer(0.2),
                    gpd.points_from_xy([-57.6510], [-19.0082])[0].buffer(0.2),
                    gpd.points_from_xy([-55.7271], [-22.5334])[0].buffer(0.2),
                    gpd.points_from_xy([-54.1994], [-23.0624])[0].buffer(0.2),
                    gpd.points_from_xy([-53.3435], [-22.2384])[0].buffer(0.2),
                    gpd.points_from_xy([-55.7879], [-20.4697])[0].buffer(0.2),
                    gpd.points_from_xy([-55.1678], [-21.6407])[0].buffer(0.2),
                    gpd.points_from_xy([-51.1909], [-19.6746])[0].buffer(0.2),
                    gpd.points_from_xy([-54.9692], [-20.9330])[0].buffer(0.2),
                    gpd.points_from_xy([-54.7605], [-18.5067])[0].buffer(0.2),
                    gpd.points_from_xy([-55.2253], [-23.1058])[0].buffer(0.2),
                    gpd.points_from_xy([-54.5426], [-21.8033])[0].buffer(0.2),
                    gpd.points_from_xy([-52.6276], [-18.7908])[0].buffer(0.2)
                ]
            }
            gdf = gpd.GeoDataFrame(data, crs="EPSG:4326")
            return gdf
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel carregar os munic√≠pios: {str(e)}")
        return gpd.GeoDataFrame(columns=['NM_MUN', 'geometry'], crs="EPSG:4326")

# Dicion√°rio com coordenadas das cidades do MS
cities_coords = {
    "Campo Grande": [-20.4697, -54.6201],
    "Dourados": [-22.2231, -54.8120],
    "Tr√™s Lagoas": [-20.7849, -51.7005],
    "Corumb√°": [-19.0082, -57.6510],
    "Ponta Por√£": [-22.5334, -55.7271],
    "Navira√≠": [-23.0624, -54.1994],
    "Nova Andradina": [-22.2384, -53.3435],
    "Aquidauana": [-20.4697, -55.7879],
    "Maracaju": [-21.6407, -55.1678],
    "Parana√≠ba": [-19.6746, -51.1909],
    "Sidrol√¢ndia": [-20.9330, -54.9692],
    "Coxim": [-18.5067, -54.7605],
    "Amambai": [-23.1058, -55.2253],
    "Rio Brilhante": [-21.8033, -54.5426],
    "Chapad√£o do Sul": [-18.7908, -52.6276]
}

# Fun√ß√£o para obter dados do CAMS
@st.cache_data(ttl=3600)  # Cache v√°lido por 1 hora
def get_cams_data(municipalities, start_date, end_date):
    """
    Obt√©m dados reais de qualidade do ar do Copernicus Atmosphere Monitoring Service (CAMS)
    para os munic√≠pios selecionados no per√≠odo especificado.
    """
    # Lista de poluentes a serem buscados
    pollutants = {
        'MP10': 'particulate_matter_10um',
        'MP2.5': 'particulate_matter_2.5um',
        'O3': 'ozone',
        'NO2': 'nitrogen_dioxide',
        'SO2': 'sulphur_dioxide',
        'CO': 'carbon_monoxide',
        'AOD': 'total_aerosol_optical_depth'
    }
    
    # Cliente CDS API (√© necess√°rio ter credenciais configuradas)
    try:
        # Configura√ß√£o do cliente CAMS com st.secrets
        ads_url = st.secrets["ads"]["url"]
        ads_key = st.secrets["ads"]["key"]
        c = cdsapi.Client(url=ads_url, key=ads_key)
    except Exception as e:
        st.error(f"Erro ao inicializar cliente CAMS: {str(e)}")
        st.info("Usando dados simulados como fallback. Para usar dados reais, configure as credenciais do CAMS.")
        # Fallback para dados simulados se n√£o conseguir conectar ao CAMS
        return _get_simulated_air_quality_data(municipalities, start_date, end_date)
    
    # Criar DataFrame com datas no per√≠odo
    date_range = pd.date_range(start=start_date, end=end_date, freq='D')
    
    # Lista para armazenar os dados
    data_list = []
    
    # Definir √°rea para MS (aproximadamente)
    area = [
        -18.0, -59.0, -24.0, -50.0,  # [north, west, south, east]
    ]
    
    try:
        # Fazer a requisi√ß√£o ao CAMS para os dados do per√≠odo
        with st.spinner("Buscando dados do CAMS..."):
            # Formato de data para CAMS
            start_date_str = start_date.strftime('%Y-%m-%d')
            end_date_str = end_date.strftime('%Y-%m-%d')
            
            # Requisitar dados do CAMS
            result = c.retrieve(
                'cams-global-atmospheric-composition-forecasts',
                {
                    'date': f'{start_date_str}/{end_date_str}',
                    'type': 'forecast',
                    'format': 'netcdf',
                    'variable': list(pollutants.values()),
                    'time': [
                        '00:00', '03:00', '06:00',
                        '09:00', '12:00', '15:00',
                        '18:00', '21:00',
                    ],
                    'leadtime_hour': '0',
                    'area': area,
                    'model_level': '137',  # Superf√≠cie
                }
            )
            
            # Processar arquivo NetCDF
            import xarray as xr
            with result.download() as buff:
                ds = xr.open_dataset(buff)
            
            # Para cada munic√≠pio, extrair dados na coordenada mais pr√≥xima
            for municipality in municipalities:
                # Obter coordenadas do munic√≠pio
                lat, lon = cities_coords.get(municipality, [-20.4697, -54.6201])  # Padr√£o: Campo Grande
                
                # Encontrar o ponto de grade mais pr√≥ximo
                municipality_data = ds.sel(latitude=lat, longitude=lon, method='nearest')
                
                # Para cada data no per√≠odo, obter m√©dias di√°rias
                for date in date_range:
                    date_data = municipality_data.sel(time=date.strftime('%Y-%m-%d'), method='nearest')
                    
                    # Extrair valores m√©dios di√°rios para cada poluente
                    pollutant_values = {}
                    for pollutant_name, pollutant_var in pollutants.items():
                        if pollutant_var in date_data:
                            # Converter para unidades corretas
                            value = date_data[pollutant_var].mean().values.item()
                            
                            # Convers√µes espec√≠ficas para cada poluente (simplificado)
                            if pollutant_name in ['MP10', 'MP2.5']:
                                value = value * 1e9  # Converter de kg/m¬≥ para Œºg/m¬≥
                            elif pollutant_name in ['O3', 'NO2', 'SO2']:
                                value = value * 1e9  # Converter de mol/mol para Œºg/m¬≥ (aproxima√ß√£o)
                            elif pollutant_name == 'CO':
                                value = value * 1e6  # Converter para ppm
                            
                            pollutant_values[pollutant_name] = max(0, value)  # Garantir valores n√£o-negativos
                        else:
                            # Valor padr√£o se n√£o dispon√≠vel
                            pollutant_values[pollutant_name] = 0
                    
                    # Adicionar √† lista de dados
                    data_list.append({
                        'Munic√≠pio': municipality,
                        'Data': date,
                        'Latitude': lat,
                        'Longitude': lon,
                        **pollutant_values
                    })
    except Exception as e:
        st.error(f"Erro ao obter dados do CAMS: {str(e)}")
        st.info("Usando dados simulados como fallback. Para usar dados reais, configure as credenciais do CAMS.")
        # Fallback para dados simulados
        return _get_simulated_air_quality_data(municipalities, start_date, end_date)
    
    # Criar DataFrame
    df = pd.DataFrame(data_list)
    return df

# Fun√ß√£o de fallback para simular dados
def _get_simulated_air_quality_data(municipalities, start_date, end_date):
    """
    Simula dados de qualidade do ar como fallback quando n√£o √© poss√≠vel obter dados reais.
    """
    # Lista de poluentes
    pollutants = ['MP10', 'MP2.5', 'O3', 'NO2', 'SO2', 'CO', 'AOD']
    
    # Criar DataFrame com datas no per√≠odo
    date_range = pd.date_range(start=start_date, end=end_date, freq='D')
    
    # Lista para armazenar os dados
    data_list = []
    
    # Para cada munic√≠pio e data, gerar dados simulados
    for municipality in municipalities:
        # Seed baseado no nome do munic√≠pio para gerar dados consistentes
        seed = sum(ord(c) for c in municipality)
        np.random.seed(seed)
        
        # Obter coordenadas do munic√≠pio
        lat, lon = cities_coords.get(municipality, [-20.4697, -54.6201])  # Padr√£o: Campo Grande
        
        # Gerar base para o munic√≠pio (valores m√©dios)
        # Valores ajustados para serem mais realistas para o MS
        base_values = {
            'MP10': np.random.uniform(20, 60),  # Œºg/m¬≥
            'MP2.5': np.random.uniform(10, 30),  # Œºg/m¬≥
            'O3': np.random.uniform(40, 100),    # Œºg/m¬≥
            'NO2': np.random.uniform(20, 60),    # Œºg/m¬≥
            'SO2': np.random.uniform(10, 40),    # Œºg/m¬≥
            'CO': np.random.uniform(1, 5),      # ppm
            'AOD': np.random.uniform(0.05, 0.3)  # adimensional
        }
        
        # Ajustar valores baseados na localiza√ß√£o (simulando efeito urbano/rural)
        # Campo Grande e Dourados (mais urbanizadas) t√™m valores ligeiramente maiores
        if municipality in ["Campo Grande", "Dourados"]:
            for pollutant in ['MP10', 'MP2.5', 'NO2', 'CO']:
                base_values[pollutant] *= 1.2
        
        # Simular efeito sazonal (esta√ß√£o seca vs. √∫mida)
        # Mato Grosso do Sul tem esta√ß√£o seca de maio a setembro
        is_dry_season = lambda d: d.month >= 5 and d.month <= 9
        
        # Tend√™ncia ao longo do tempo
        trend_factor = np.random.uniform(0.8, 1.2, size=len(date_range))
        
        for i, date in enumerate(date_range):
            # Aplicar efeito sazonal
            seasonal_factor = 1.5 if is_dry_season(date) else 1.0
            
            # Aumentar especialmente MP10, MP2.5 e AOD durante esta√ß√£o seca (queimadas)
            seasonal_values = {p: base_values[p] for p in pollutants}
            if is_dry_season(date):
                seasonal_values['MP10'] *= 1.8
                seasonal_values['MP2.5'] *= 1.7
                seasonal_values['AOD'] *= 2.0
            
            # Aplicar tend√™ncia e varia√ß√£o di√°ria
            daily_values = {
                pollutant: max(0, seasonal_values[pollutant] * trend_factor[i] * 
                             np.random.uniform(0.8, 1.2) * seasonal_factor)
                for pollutant in pollutants
            }
            
            # Ajustes adicionais para aumentar a variabilidade entre munic√≠pios
            # Maior urbaniza√ß√£o = mais polui√ß√£o de origem veicular (NO2, CO)
            urban_factor = 1.0 + abs(np.sin(seed * 0.1)) * 0.5
            daily_values['NO2'] *= urban_factor
            daily_values['CO'] *= urban_factor
            
            # Adicionar √† lista de dados
            data_list.append({
                'Munic√≠pio': municipality,
                'Data': date,
                'Latitude': lat,
                'Longitude': lon,
                **daily_values
            })
    
    # Criar DataFrame
    df = pd.DataFrame(data_list)
    return df

# Fun√ß√£o para obter previs√£o da qualidade do ar
def get_air_quality_forecast(municipalities, days=5):
    """
    Obt√©m previs√£o da qualidade do ar para os pr√≥ximos dias
    """
    today = datetime.now().date()
    forecast_end = today + timedelta(days=days)
    
    # Tentar obter dados de previs√£o do CAMS
    with st.spinner(f"Obtendo previs√£o para os pr√≥ximos {days} dias..."):
        forecast_data = get_cams_data(municipalities, today, forecast_end)
    
    return forecast_data

# Fun√ß√£o para classificar a qualidade do ar conforme CONAMA 491/2018
def classify_air_quality_conama(df):
    """
    Classifica a qualidade do ar conforme a Resolu√ß√£o CONAMA n¬∫ 491/2018
    """
    # Limites definidos pela Resolu√ß√£o CONAMA n¬∫ 491/2018 (valores simplificados)
    limits_conama = {
        'MP10': [50, 100, 150, 250, 250],  # Œºg/m¬≥ - m√©dia de 24h
        'MP2.5': [25, 50, 75, 125, 125],   # Œºg/m¬≥ - m√©dia de 24h
        'O3': [100, 130, 160, 200, 200],   # Œºg/m¬≥ - m√©dia de 8h
        'NO2': [200, 240, 320, 1130, 1130], # Œºg/m¬≥ - m√©dia de 1h
        'SO2': [20, 40, 365, 800, 800],    # Œºg/m¬≥ - m√©dia de 24h
        'CO': [9, 11, 13, 15, 15],         # ppm - m√©dia de 8h
        'AOD': [0.1, 0.2, 0.3, 0.5, 0.5]   # adimensional - valores aproximados
    }
    
    # Categorias de qualidade
    categories = ['Boa', 'Moderada', 'Ruim', 'Muito Ruim', 'P√©ssima']
    colors = ['#00ccff', '#009933', '#ffff00', '#ff9933', '#ff0000', '#990000']
    
    # Criar c√≥pia para n√£o modificar o original
    result_df = df.copy()
    
    # Adicionar classifica√ß√£o para cada poluente
    for pollutant, limits in limits_conama.items():
        category_col = f'Categoria_{pollutant}'
        result_df[category_col] = 'Boa'
        
        for i, limit in enumerate(limits):
            if i == 0:
                # Boa: at√© o primeiro limite
                result_df.loc[result_df[pollutant] <= limit, category_col] = categories[0]
            elif i < len(limits) - 1:
                # Categorias intermedi√°rias
                result_df.loc[(result_df[pollutant] > limits[i-1]) & 
                            (result_df[pollutant] <= limit), 
                            category_col] = categories[i]
            else:
                # √öltima categoria: acima do pen√∫ltimo limite
                result_df.loc[result_df[pollutant] > limits[i-1], 
                            category_col] = categories[i]
    
    # Determinar categoria geral (pior caso)
    category_cols = [f'Categoria_{p}' for p in limits_conama.keys()]
    
    # Fun√ß√£o para obter o √≠ndice da categoria
    def category_index(cat):
        try:
            return categories.index(cat)
        except ValueError:
            return 0
    
    # Aplicar fun√ß√£o para encontrar a pior categoria
    result_df['Categoria_Geral'] = result_df[category_cols].apply(
        lambda row: categories[max(category_index(cat) for cat in row)], axis=1
    )
    
    # Adicionar coluna de cor
    result_df['Cor'] = result_df['Categoria_Geral'].apply(
        lambda cat: colors[categories.index(cat)]
    )
    
    return result_df

# Fun√ß√£o para classificar a qualidade do ar conforme OMS
def classify_air_quality_who(df):
    """
    Classifica a qualidade do ar conforme as diretrizes da OMS (2021)
    """
    # Limites definidos pela OMS (2021) - valores simplificados
    limits_who = {
        'MP10': [15, 45, 75, 150, 150],    # Œºg/m¬≥ - m√©dia de 24h
        'MP2.5': [5, 15, 25, 50, 50],      # Œºg/m¬≥ - m√©dia de 24h
        'O3': [60, 100, 140, 180, 180],    # Œºg/m¬≥ - m√©dia de 8h
        'NO2': [25, 50, 100, 200, 200],    # Œºg/m¬≥ - m√©dia de 24h
        'SO2': [40, 80, 160, 350, 350],    # Œºg/m¬≥ - m√©dia de 24h
        'CO': [4, 9, 13, 15, 15],          # ppm - m√©dia de 8h
        'AOD': [0.05, 0.1, 0.2, 0.4, 0.4]  # adimensional - valores aproximados
    }
    
    # Categorias de qualidade
    categories = ['Boa', 'Moderada', 'Ruim', 'Muito Ruim', 'P√©ssima']
    colors = ['#00ccff', '#009933', '#ffff00', '#ff9933', '#ff0000', '#990000']
    
    # Criar c√≥pia para n√£o modificar o original
    result_df = df.copy()
    
    # Adicionar classifica√ß√£o para cada poluente
    for pollutant, limits in limits_who.items():
        category_col = f'Categoria_WHO_{pollutant}'
        result_df[category_col] = 'Boa'
        
        for i, limit in enumerate(limits):
            if i == 0:
                # Boa: at√© o primeiro limite
                result_df.loc[result_df[pollutant] <= limit, category_col] = categories[0]
            elif i < len(limits) - 1:
                # Categorias intermedi√°rias
                result_df.loc[(result_df[pollutant] > limits[i-1]) & 
                            (result_df[pollutant] <= limit), 
                            category_col] = categories[i]
            else:
                # √öltima categoria: acima do pen√∫ltimo limite
                result_df.loc[result_df[pollutant] > limits[i-1], 
                            category_col] = categories[i]
    
    # Determinar categoria geral (pior caso)
    category_cols = [f'Categoria_WHO_{p}' for p in limits_who.keys()]
    
    # Fun√ß√£o para obter o √≠ndice da categoria
    def category_index(cat):
        try:
            return categories.index(cat)
        except ValueError:
            return 0
    
    # Aplicar fun√ß√£o para encontrar a pior categoria
    result_df['Categoria_Geral_WHO'] = result_df[category_cols].apply(
        lambda row: categories[max(category_index(cat) for cat in row)], axis=1
    )
    
    # Adicionar coluna de cor
    result_df['Cor_WHO'] = result_df['Categoria_Geral_WHO'].apply(
        lambda cat: colors[categories.index(cat)]
    )
    
    return result_df

# Fun√ß√£o para criar gr√°fico da s√©rie temporal
def create_time_series_plot(df, municipality, standard='CONAMA'):
    """
    Cria um gr√°fico interativo de s√©rie temporal para o munic√≠pio selecionado
    """
    # Filtrar dados para o munic√≠pio
    mun_data = df[df['Munic√≠pio'] == municipality].sort_values('Data')
    
    # Selecionar as colunas de categoria e cor apropriadas
    if standard == 'CONAMA':
        cat_col = 'Categoria_Geral'
        color_col = 'Cor'
    else:  # WHO
        cat_col = 'Categoria_Geral_WHO'
        color_col = 'Cor_WHO'
    
    # Criar subplots - um para cada poluente
    pollutants = ['MP10', 'MP2.5', 'O3', 'NO2', 'SO2', 'CO', 'AOD']
    fig = make_subplots(rows=4, cols=2, subplot_titles=pollutants + ['Qualidade Geral'],
                       shared_xaxes=True, vertical_spacing=0.1)
    
    # Adicionar gr√°ficos para cada poluente
    for i, pollutant in enumerate(pollutants):
        row = i // 2 + 1
        col = i % 2 + 1
        
        # Pular se ultrapassar o n√∫mero de linhas
        if row > 4:
            continue
            
        # Selecionar coluna de categoria espec√≠fica do poluente
        poll_cat_col = f'Categoria_{pollutant}' if standard=='CONAMA' else f'Categoria_WHO_{pollutant}'
        
        # Adicionar s√©rie temporal
        fig.add_trace(
            go.Scatter(
                x=mun_data['Data'],
                y=mun_data[pollutant],
                mode='lines+markers',
                name=pollutant,
                line=dict(width=2),
                marker=dict(size=6),
                hovertemplate=f"{pollutant}: %{{y:.1f}}<br>Data: %{{x|%d/%m/%Y}}<br>Categoria: {mun_data[poll_cat_col]}"
            ),
            row=row, col=col
        )
        
        # Adicionar limites (simplificado - apenas o primeiro limite para "Boa")
        if standard == 'CONAMA':
            limits = {
                'MP10': 50, 'MP2.5': 25, 'O3': 100,
                'NO2': 200, 'SO2': 20, 'CO': 9, 'AOD': 0.1
            }
        else:  # WHO
            limits = {
                'MP10': 15, 'MP2.5': 5, 'O3': 60,
                'NO2': 25, 'SO2': 40, 'CO': 4, 'AOD': 0.05
            }
        
        # Adicionar linha de limite
        fig.add_trace(
            go.Scatter(
                x=[mun_data['Data'].min(), mun_data['Data'].max()],
                y=[limits[pollutant], limits[pollutant]],
                mode='lines',
                line=dict(color='red', width=1, dash='dash'),
                name=f"Limite {pollutant}",
                showlegend=False
            ),
            row=row, col=col
        )
    
    # Adicionar gr√°fico de categoria geral (√∫ltimo painel)
    # Criar mapeamento num√©rico para categorias
    category_map = {'Boa': 0, 'Moderada': 1, 'Ruim': 2, 'Muito Ruim': 3, 'P√©ssima': 4}
    mun_data['cat_numeric'] = mun_data[cat_col].map(category_map)
    
    # Cores para as categorias
    cat_colors = ['#00ccff', '#009933', '#ffff00', '#ff9933', '#ff0000']
    
    # Adicionar gr√°fico de barras para categoria geral
    fig.add_trace(
        go.Bar(
            x=mun_data['Data'],
            y=mun_data['cat_numeric'],
            marker=dict(
                color=mun_data[cat_col].map(lambda c: cat_colors[category_map[c]]),
                line=dict(width=0)
            ),
            hovertemplate="Data: %{x|%d/%m/%Y}<br>Qualidade: " + mun_data[cat_col],
            name="Qualidade Geral"
        ),
        row=4, col=2
    )
    
    # Configurar eixo y para categorias
    fig.update_yaxes(
        tickvals=[0, 1, 2, 3, 4],
        ticktext=['Boa', 'Moderada', 'Ruim', 'Muito Ruim', 'P√©ssima'],
        row=4, col=2
    )
    
    # Atualizar layout
    fig.update_layout(
        title=f"S√©rie Temporal de Poluentes - {municipality} (Padr√£o: {standard})",
        height=900,
        width=1000,
        showlegend=False,
        template="plotly_white"
    )
    
    # Atualizar t√≠tulos dos eixos
    units = {
        'MP10': 'Œºg/m¬≥',
        'MP2.5': 'Œºg/m¬≥',
        'O3': 'Œºg/m¬≥',
        'NO2': 'Œºg/m¬≥',
        'SO2': 'Œºg/m¬≥',
        'CO': 'ppm',
        'AOD': 'adimensional'
    }
    
    for i, pollutant in enumerate(pollutants):
        if i >= 7:  # Pular se for al√©m do n√∫mero de poluentes
            continue
            
        row = i // 2 + 1
        col = i % 2 + 1
        
        if row <= 4:  # Verificar se est√° dentro do range
            fig.update_yaxes(title_text=units[pollutant], row=row, col=col)
            
            if row == 4:  # √öltima linha
                fig.update_xaxes(title_text="Data", row=row, col=col)
    
    return fig

# Fun√ß√£o para gerar mapa de qualidade do ar
def create_air_quality_map(df, gdf, date, pollutant='Categoria_Geral', standard='CONAMA'):
    """
    Cria um mapa interativo com a qualidade do ar para todos os munic√≠pios em uma data espec√≠fica
    Usando uma abordagem com go.Scattermapbox para maior estabilidade
    """
    # Filtrar dados para a data
    date_data = df[df['Data'] == date]
    
# Determinar se estamos visualizando um poluente espec√≠fico ou a categoria geral
    is_category = pollutant in ['Categoria_Geral', 'Categoria_Geral_WHO']
    
    # Selecionar a coluna apropriada dependendo do padr√£o
    if is_category:
        if standard == 'CONAMA':
            value_col = 'Categoria_Geral'
            color_col = 'Cor'
        else:  # WHO
            value_col = 'Categoria_Geral_WHO'
            color_col = 'Cor_WHO'
    else:
        # Se for um poluente espec√≠fico, usar o nome diretamente
        value_col = pollutant
        
        # E selecionar a coluna de categoria apropriada
        if standard == 'CONAMA':
            cat_col = f'Categoria_{pollutant}'
        else:  # WHO
            cat_col = f'Categoria_WHO_{pollutant}'
    
    # Mesclar dados com o geodataframe
    map_data = gdf.merge(date_data, left_on='NM_MUN', right_on='Munic√≠pio', how='inner')
    
    # Verificar se h√° dados para criar o mapa
    if map_data.empty:
        st.warning(f"N√£o h√° dados de qualidade do ar dispon√≠veis para {date.strftime('%d/%m/%Y')}")
        return None
    
    # Criar uma figura com scatter_mapbox
    fig = go.Figure()
    
    # Definir cores para as categorias (se estamos visualizando categorias)
    color_map = {
        'Boa': '#00ccff',
        'Moderada': '#009933',
        'Ruim': '#ffff00',
        'Muito Ruim': '#ff9933',
        'P√©ssima': '#ff0000'
    }
    
    # Escala de cores para valores num√©ricos (se estamos visualizando poluentes espec√≠ficos)
    if not is_category:
        # Determinar faixa de valores para o poluente
        vmin, vmax = map_data[value_col].min(), map_data[value_col].max()
        
        # Colorscale espec√≠fico para cada tipo de poluente
        colorscales = {
            'MP10': 'Reds',
            'MP2.5': 'Oranges',
            'O3': 'Blues',
            'NO2': 'Purples',
            'SO2': 'Greens',
            'CO': 'Greys',
            'AOD': 'YlOrBr'
        }
        colorscale = colorscales.get(value_col, 'Viridis')
    
    # Adicionar pontos para cada munic√≠pio
    for idx, row in map_data.iterrows():
        # Obter o centroide da geometria para posicionar o ponto
        try:
            # Se a geometria for um pol√≠gono, extrair o centroide
            if hasattr(row.geometry, 'centroid'):
                lon, lat = row.geometry.centroid.x, row.geometry.centroid.y
            # Se for um ponto (caso do fallback), usar as coordenadas diretamente
            elif hasattr(row.geometry, 'x') and hasattr(row.geometry, 'y'):
                lon, lat = row.geometry.x, row.geometry.y
            else:
                # Usar coordenadas do dicion√°rio como fallback
                if row['Munic√≠pio'] in cities_coords:
                    lat, lon = cities_coords[row['Munic√≠pio']]
                else:
                    # Usar as coordenadas do dataframe
                    lat, lon = row['Latitude'], row['Longitude']
            
            # Determinar a cor do marcador
            if is_category:
                # Para categorias, usar o mapa de cores pr√©-definido
                category = row[value_col]
                marker_color = color_map.get(category, '#cccccc')
                
                # Texto para hover
                hover_text = f"<b>{row['Munic√≠pio']}</b><br>" + \
                            f"Qualidade do Ar: {category}<br>" + \
                            f"MP10: {row['MP10']:.2f} Œºg/m¬≥<br>" + \
                            f"MP2.5: {row['MP2.5']:.2f} Œºg/m¬≥<br>" + \
                            f"O3: {row['O3']:.2f} Œºg/m¬≥<br>" + \
                            f"NO2: {row['NO2']:.2f} Œºg/m¬≥<br>" + \
                            f"SO2: {row['SO2']:.2f} Œºg/m¬≥<br>" + \
                            f"CO: {row['CO']:.2f} ppm<br>" + \
                            f"AOD: {row['AOD']:.2f}"
            else:
                # Para poluentes espec√≠ficos, usar o valor num√©rico
                value = row[value_col]
                
                # Normalizar valor entre 0 e 1 para colora√ß√£o
                norm_value = (value - vmin) / (vmax - vmin) if vmax > vmin else 0.5
                
                # Escolher cor baseada no valor normalizado
                marker_color = px.colors.sample_colorscale(
                    colorscale, [norm_value])[0]
                
                # Texto para hover
                hover_text = f"<b>{row['Munic√≠pio']}</b><br>" + \
                            f"{value_col}: {value:.2f}<br>" + \
                            f"Categoria: {row[cat_col]}"
            
            # Adicionar marker
            fig.add_trace(go.Scattermapbox(
                lat=[lat],
                lon=[lon],
                mode='markers',
                marker=dict(
                    size=15,
                    color=marker_color,
                    opacity=0.8
                ),
                text=row['Munic√≠pio'],
                hoverinfo='text',
                hovertext=hover_text,
                name=row['Munic√≠pio']
            ))
        except Exception as e:
            st.warning(f"Erro ao processar munic√≠pio {row['Munic√≠pio']}: {str(e)}")
            continue
    
    # Configurar o layout do mapa
    fig.update_layout(
        title=f"Mapa de {pollutant if not is_category else 'Qualidade do Ar'} - {date.strftime('%d/%m/%Y')} (Padr√£o: {standard})",
        mapbox=dict(
            style="carto-positron",
            zoom=5,
            center={"lat": -20.5, "lon": -54.6},
        ),
        height=600,
        margin={"r":0,"t":50,"l":0,"b":0},
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    # Adicionar legenda manualmente
    if is_category:
        # Legenda para categorias
        legend_categories = list(color_map.keys())
        for i, category in enumerate(legend_categories):
            fig.add_trace(go.Scattermapbox(
                lat=[None],
                lon=[None],
                mode='markers',
                marker=dict(size=10, color=color_map[category]),
                name=category,
                showlegend=True
            ))
    else:
        # Legenda para valores num√©ricos (simplificada)
        # Adicionar alguns pontos de refer√™ncia na legenda
        values = map_data[value_col]
        breaks = np.linspace(vmin, vmax, 5)
        
        # Obter unidade para o poluente
        units = {
            'MP10': 'Œºg/m¬≥',
            'MP2.5': 'Œºg/m¬≥',
            'O3': 'Œºg/m¬≥',
            'NO2': 'Œºg/m¬≥',
            'SO2': 'Œºg/m¬≥',
            'CO': 'ppm',
            'AOD': ''
        }
        unit = units.get(value_col, '')
        
        for i, val in enumerate(breaks):
            norm_val = i / (len(breaks) - 1)
            color = px.colors.sample_colorscale(colorscale, [norm_val])[0]
            
            fig.add_trace(go.Scattermapbox(
                lat=[None],
                lon=[None],
                mode='markers',
                marker=dict(size=10, color=color),
                name=f"{val:.2f} {unit}",
                showlegend=True
            ))
    
    return fig

# Fun√ß√£o para criar anima√ß√£o de poluentes
def create_pollutant_animation(df, gdf, start_date, end_date, pollutant, standard='CONAMA'):
    """
    Cria uma anima√ß√£o avan√ßada da evolu√ß√£o espacial de um poluente espec√≠fico
    """
    # Filtrar dados para o per√≠odo
    period_data = df[(df['Data'] >= start_date) & (df['Data'] <= end_date)]
    
    # Obter datas √∫nicas no per√≠odo
    dates = sorted(period_data['Data'].unique())
    
    # Verificar se h√° dados suficientes
    if len(dates) < 2:
        st.warning("Per√≠odo muito curto para cria√ß√£o de anima√ß√£o. Selecione um per√≠odo mais longo.")
        return None
    
    # Limitar a 7 dias para performance
    if len(dates) > 7:
        st.warning(f"Muitas datas selecionadas. Mostrando apenas os primeiros 7 dias de {len(dates)} dispon√≠veis.")
        dates = dates[:7]
    
    # Criar um mapa para cada data
    animation_frames = []
    
    # Determinar range dos valores para consist√™ncia na escala de cores
    if pollutant != 'Categoria_Geral' and pollutant != 'Categoria_Geral_WHO':
        vmin = period_data[pollutant].min()
        vmax = period_data[pollutant].max()
    else:
        vmin = vmax = None
    
    # Definir colorscale espec√≠fico para cada tipo de poluente
    colorscales = {
        'MP10': 'Reds',
        'MP2.5': 'Oranges',
        'O3': 'Blues',
        'NO2': 'Purples',
        'SO2': 'Greens',
        'CO': 'Greys',
        'AOD': 'YlOrBr',
        'Categoria_Geral': None,
        'Categoria_Geral_WHO': None
    }
    
    # Criar figura base
    fig = go.Figure()
    
    # Para cada data, criar um frame
    for date in dates:
        with st.spinner(f"Processando anima√ß√£o para {date.strftime('%d/%m/%Y')}..."):
            # Filtrar dados para esta data
            date_data = period_data[period_data['Data'] == date]
            
            # Criar frame para esta data
            frame_data = []
            
            # Se estamos visualizando categorias
            is_category = pollutant in ['Categoria_Geral', 'Categoria_Geral_WHO']
            
            if is_category:
                cat_col = pollutant
                color_map = {
                    'Boa': '#00ccff',
                    'Moderada': '#009933',
                    'Ruim': '#ffff00',
                    'Muito Ruim': '#ff9933',
                    'P√©ssima': '#ff0000'
                }
                
                # Para cada munic√≠pio, criar um marker
                for _, row in date_data.iterrows():
                    lat, lon = row['Latitude'], row['Longitude']
                    category = row[cat_col]
                    marker_color = color_map.get(category, '#cccccc')
                    
                    # Texto para hover
                    hover_text = f"<b>{row['Munic√≠pio']}</b><br>" + \
                                f"Qualidade do Ar: {category}<br>" + \
                                f"Data: {date.strftime('%d/%m/%Y')}<br>" + \
                                f"MP10: {row['MP10']:.2f} Œºg/m¬≥<br>" + \
                                f"MP2.5: {row['MP2.5']:.2f} Œºg/m¬≥<br>" + \
                                f"O3: {row['O3']:.2f} Œºg/m¬≥<br>" + \
                                f"NO2: {row['NO2']:.2f} Œºg/m¬≥<br>" + \
                                f"SO2: {row['SO2']:.2f} Œºg/m¬≥<br>" + \
                                f"CO: {row['CO']:.2f} ppm<br>" + \
                                f"AOD: {row['AOD']:.2f}"
                    
                    # Adicionar marker
                    frame_data.append(
                        go.Scattermapbox(
                            lat=[lat],
                            lon=[lon],
                            mode='markers',
                            marker=dict(
                                size=15,
                                color=marker_color,
                                opacity=0.8
                            ),
                            text=row['Munic√≠pio'],
                            hoverinfo='text',
                            hovertext=hover_text,
                            name=row['Munic√≠pio']
                        )
                    )
            else:
                # Para visualiza√ß√£o de poluente espec√≠fico
                # Usar interpola√ß√£o espacial para criar uma superf√≠cie cont√≠nua
                from scipy.interpolate import griddata
                
                # Extrair coordenadas e valores
                lats = date_data['Latitude'].values
                lons = date_data['Longitude'].values
                values = date_data[pollutant].values
                
                # Criar grid para interpola√ß√£o
                grid_size = 100
                lat_min, lat_max = min(lats) - 0.5, max(lats) + 0.5
                lon_min, lon_max = min(lons) - 0.5, max(lons) + 0.5
                grid_lats = np.linspace(lat_min, lat_max, grid_size)
                grid_lons = np.linspace(lon_min, lon_max, grid_size)
                grid_lon, grid_lat = np.meshgrid(grid_lons, grid_lats)
                
                # Interpolar valores
                grid_values = griddata((lons, lats), values, (grid_lon, grid_lat), method='cubic')
                
                # Criar Contour
                colorscale = colorscales[pollutant]
                
                # Adicionar contorno
                frame_data.append(
                    go.Contourmapbox(
                        z=grid_values,
                        lat=grid_lats,
                        lon=grid_lons,
                        colorscale=colorscale,
                        zmin=vmin,
                        zmax=vmax,
                        colorbar=dict(
                            title=pollutant,
                            titleside="right",
                            titlefont=dict(size=10),
                            tickfont=dict(size=8)
                        ),
                        hoverinfo='z',
                        name=f"{pollutant} - {date.strftime('%d/%m/%Y')}"
                    )
                )
                
                # Adicionar pontos para cidades
                frame_data.append(
                    go.Scattermapbox(
                        lat=lats,
                        lon=lons,
                        mode='markers+text',
                        marker=dict(
                            size=10,
                            color='white',
                            opacity=0.7
                        ),
                        text=date_data['Munic√≠pio'],
                        textposition="top center",
                        hoverinfo='text',
                        hovertext=[f"{mun}: {val:.2f}" for mun, val in zip(date_data['Munic√≠pio'], values)],
                        name="Munic√≠pios"
                    )
                )
            
            # Adicionar frame
            animation_frames.append(
                go.Frame(
                    data=frame_data,
                    name=date.strftime('%d/%m/%Y')
                )
            )
    
    # Configurar figura principal
    # Usar o primeiro frame como dados iniciais
    fig.add_traces(animation_frames[0].data)
    
    # Adicionar frames √† figura
    fig.frames = animation_frames
    
    # Configurar sliders
    sliders = [{
        'active': 0,
        'steps': [
            {
                'method': 'animate',
                'args': [
                    [frame.name],
                    {
                        'mode': 'immediate',
                        'frame': {'duration': 500, 'redraw': True},
                        'transition': {'duration': 300}
                    }
                ],
                'label': frame.name
            }
            for frame in animation_frames
        ],
        'x': 0.1,
        'len': 0.9,
        'y': 0,
        'yanchor': 'top',
        'pad': {'t': 50, 'b': 10},
        'currentvalue': {
            'visible': True,
            'prefix': 'Data: ',
            'xanchor': 'right',
            'font': {'size': 16, 'color': '#666'}
        }
    }]
    
    # Adicionar bot√µes de play/pause
    updatemenus = [{
        'type': 'buttons',
        'buttons': [
            {
                'args': [
                    None,
                    {
                        'frame': {'duration': 500, 'redraw': True},
                        'fromcurrent': True,
                        'transition': {'duration': 300, 'easing': 'quadratic-in-out'}
                    }
                ],
                'label': '‚ñ∂Ô∏è Play',
                'method': 'animate'
            },
            {
                'args': [
                    [None],
                    {
                        'frame': {'duration': 0, 'redraw': False},
                        'mode': 'immediate',
                        'transition': {'duration': 0}
                    }
                ],
                'label': '‚è∏Ô∏è Pause',
                'method': 'animate'
            }
        ],
        'direction': 'left',
        'pad': {'r': 10, 't': 10},
        'x': 0.1,
        'xanchor': 'right',
        'y': 0,
        'yanchor': 'top'
    }]
    
    # Configurar layout
    title = f"Evolu√ß√£o de {pollutant if pollutant not in ['Categoria_Geral', 'Categoria_Geral_WHO'] else 'Qualidade do Ar'}"
    title += f" ({start_date.strftime('%d/%m/%Y')} a {end_date.strftime('%d/%m/%Y')})"
    
    fig.update_layout(
        title=title,
        mapbox=dict(
            style="carto-positron",
            zoom=5,
            center={"lat": -20.5, "lon": -54.6},
        ),
        height=700,
        margin={"r":0,"t":50,"l":0,"b":0},
        updatemenus=updatemenus,
        sliders=sliders
    )
    
    return fig

# Fun√ß√£o para gerar relat√≥rio de qualidade do ar
def generate_air_quality_report(df, municipality, start_date, end_date, standard='CONAMA'):
    """
    Gera um relat√≥rio de qualidade do ar para um munic√≠pio espec√≠fico
    """
    # Filtrar dados para o munic√≠pio e per√≠odo
    mun_data = df[(df['Munic√≠pio'] == municipality) & 
                 (df['Data'] >= start_date) & 
                 (df['Data'] <= end_date)].sort_values('Data')
    
    # Selecionar as colunas de categoria e cor apropriadas
    if standard == 'CONAMA':
        cat_col = 'Categoria_Geral'
        color_col = 'Cor'
        prefix = ''
    else:  # WHO
        cat_col = 'Categoria_Geral_WHO'
        color_col = 'Cor_WHO'
        prefix = 'WHO_'
    
    # Calcular estat√≠sticas
    stats = {}
    pollutants = ['MP10', 'MP2.5', 'O3', 'NO2', 'SO2', 'CO', 'AOD']
    
    for pollutant in pollutants:
        stats[pollutant] = {
            'M√©dia': mun_data[pollutant].mean(),
            'M√°ximo': mun_data[pollutant].max(),
            'M√≠nimo': mun_data[pollutant].min(),
            'Desvio Padr√£o': mun_data[pollutant].std()
        }
    
    # Contar ocorr√™ncias de cada categoria
    cat_counts = mun_data[cat_col].value_counts().to_dict()
    
    # Identificar o poluente mais cr√≠tico
    worst_days = {}
    for pollutant in pollutants:
        cat_col_poll = f'Categoria_{prefix}{pollutant}'
        if mun_data.empty:
            continue
            
        worst_idx = mun_data[cat_col_poll].map(
            {'Boa': 0, 'Moderada': 1, 'Ruim': 2, 'Muito Ruim': 3, 'P√©ssima': 4}
        ).idxmax()
        
        if not pd.isna(worst_idx):
            worst_day = mun_data.loc[worst_idx]
            worst_days[pollutant] = {
                'Data': worst_day['Data'],
                'Valor': worst_day[pollutant],
                'Categoria': worst_day[cat_col_poll]
            }
    
    # Criar o relat√≥rio
    report = {
        'Munic√≠pio': municipality,
        'Per√≠odo': {
            'In√≠cio': start_date,
            'Fim': end_date,
            'Total de Dias': (end_date - start_date).days + 1
        },
        'Padr√£o': 'CONAMA 491/2018' if standard == 'CONAMA' else 'OMS (2021)',
        'Estat√≠sticas': stats,
        'Categorias': cat_counts,
        'Dias Cr√≠ticos': worst_days
    }
    
    return report

# Carregar munic√≠pios
with st.spinner("Carregando shapes dos munic√≠pios..."):
    ms_municipalities = load_ms_municipalities()
    municipalities_list = sorted(ms_municipalities['NM_MUN'].unique().tolist())

# Sidebar para configura√ß√µes
st.sidebar.header("‚öôÔ∏è Configura√ß√µes")

# Sele√ß√£o de munic√≠pios
selected_municipalities = st.sidebar.multiselect(
    "Selecione os munic√≠pios",
    options=municipalities_list,
    default=[municipalities_list[0]] if municipalities_list else []
)

# Per√≠odo de an√°lise
st.sidebar.subheader("Per√≠odo de An√°lise")
start_date = st.sidebar.date_input(
    "Data de In√≠cio",
    datetime.now() - timedelta(days=30)
)
end_date = st.sidebar.date_input(
    "Data Final",
    datetime.now()
)

# Padr√£o de qualidade do ar
standard = st.sidebar.radio(
    "Padr√£o de Qualidade do Ar",
    options=["CONAMA", "OMS"],
    help="CONAMA: Resolu√ß√£o n¬∫ 491/2018 | OMS: Diretrizes da OMS (2021)"
)

# Verificar sele√ß√µes
if not selected_municipalities:
    st.warning("‚ö†Ô∏è Por favor, selecione pelo menos um munic√≠pio.")
    st.stop()

if start_date > end_date:
    st.error("‚ùå A data de in√≠cio deve ser anterior √† data final.")
    st.stop()

# Obter dados de qualidade do ar
with st.spinner("üîÑ Carregando dados de qualidade do ar do CAMS..."):
    air_data = get_cams_data(selected_municipalities, start_date, end_date)
    
    # Classificar qualidade do ar
    air_data = classify_air_quality_conama(air_data)
    air_data = classify_air_quality_who(air_data)

# Layout principal - usar abas
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üìä Vis√£o Geral", 
    "üìà S√©ries Temporais", 
    "üó∫Ô∏è Mapa de Qualidade do Ar",
    "üé¨ Anima√ß√£o de Concentra√ß√£o",
    "üìù Relat√≥rios",
    "üîÆ Previs√£o"
])

with tab1:
    st.header("üìä Vis√£o Geral da Qualidade do Ar")
    
    # Mostrar estat√≠sticas gerais
    st.subheader("Estat√≠sticas do Per√≠odo")
    
    # Criar m√©tricas por munic√≠pio
    for municipality in selected_municipalities:
        st.markdown(f"### üèôÔ∏è {municipality}")
        
        # Filtrar dados para o munic√≠pio
        mun_data = air_data[air_data['Munic√≠pio'] == municipality]
        
        # Mostrar categoria predominante
        if standard == "CONAMA":
            cat_counts = mun_data['Categoria_Geral'].value_counts()
            predominant_cat = cat_counts.index[0] if not cat_counts.empty else "N/A"
            cat_color = mun_data[mun_data['Categoria_Geral'] == predominant_cat]['Cor'].iloc[0] if not mun_data.empty else "#CCCCCC"
        else:  # WHO
            cat_counts = mun_data['Categoria_Geral_WHO'].value_counts()
            predominant_cat = cat_counts.index[0] if not cat_counts.empty else "N/A"
            cat_color = mun_data[mun_data['Categoria_Geral_WHO'] == predominant_cat]['Cor_WHO'].iloc[0] if not mun_data.empty else "#CCCCCC"
        
        # Criar colunas para m√©tricas
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"""
            <div style="padding:10px; border-radius:5px; background-color:{cat_color}; color:white; text-align:center; margin:5px 0;">
            <h4 style="margin:0;">Qualidade Predominante: {predominant_cat}</h4>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            # Mostrar pior dia
            if standard == "CONAMA":
                worst_day_idx = mun_data['Categoria_Geral'].map({
                    'Boa': 0, 'Moderada': 1, 'Ruim': 2, 'Muito Ruim': 3, 'P√©ssima': 4
                }).idxmax()
            else:  # WHO
                worst_day_idx = mun_data['Categoria_Geral_WHO'].map({
                    'Boa': 0, 'Moderada': 1, 'Ruim': 2, 'Muito Ruim': 3, 'P√©ssima': 4
                }).idxmax()
            
            if not pd.isna(worst_day_idx) and not mun_data.empty:
                worst_day = mun_data.loc[worst_day_idx]
                worst_date = worst_day['Data'].strftime('%d/%m/%Y')
                worst_cat = worst_day['Categoria_Geral'] if standard == "CONAMA" else worst_day['Categoria_Geral_WHO']
                st.metric("Pior Dia", f"{worst_date} ({worst_cat})")
            else:
                st.metric("Pior Dia", "N/A")
        
        with col3:
            # Calcular m√©dia dos poluentes
            pollutants = ['MP10', 'MP2.5', 'O3', 'NO2', 'SO2', 'CO', 'AOD']
            avg_values = {p: mun_data[p].mean() for p in pollutants}
            # Encontrar o poluente com maior valor em rela√ß√£o ao limite
            if standard == "CONAMA":
                limits = {
                    'MP10': 50, 'MP2.5': 25, 'O3': 100,
                    'NO2': 200, 'SO2': 20, 'CO': 9, 'AOD': 0.1
                }
            else:  # WHO
                limits = {
                    'MP10': 15, 'MP2.5': 5, 'O3': 60,
                    'NO2': 25, 'SO2': 40, 'CO': 4, 'AOD': 0.05
                }
            
            ratios = {p: avg_values[p] / limits[p] for p in pollutants}
            worst_pollutant = max(ratios, key=ratios.get)
            st.metric("Poluente Cr√≠tico", f"{worst_pollutant} ({avg_values[worst_pollutant]:.1f})")
        
        # Mostrar distribui√ß√£o de categorias
        st.subheader(f"Distribui√ß√£o de Qualidade do Ar - {municipality}")
        
        if standard == "CONAMA":
            cat_col = 'Categoria_Geral'
        else:  # WHO
            cat_col = 'Categoria_Geral_WHO'
        
        categories = ['Boa', 'Moderada', 'Ruim', 'Muito Ruim', 'P√©ssima']
        colors = ['#00ccff', '#009933', '#ffff00', '#ff9933', '#ff0000']
        
        # Contar ocorr√™ncias de cada categoria
        cat_data = mun_data[cat_col].value_counts().reindex(categories, fill_value=0)
        
        # Criar gr√°fico
        fig = px.bar(
            x=cat_data.index,
            y=cat_data.values,
            labels={'x': 'Categoria', 'y': 'N√∫mero de Dias'},
            title=f"Distribui√ß√£o de Categorias de Qualidade do Ar - {municipality} (Padr√£o: {standard})"
        )
        
        # Definir cores
        fig.update_traces(marker_color=colors)
        fig.update_layout(xaxis_title="Categoria", yaxis_title="N√∫mero de Dias")
        
        st.plotly_chart(fig)
        
        # Adicionar separador
        st.markdown("---")

with tab2:
    st.header("üìà S√©ries Temporais")
    
    # Selecionar munic√≠pio para an√°lise detalhada
    selected_mun = st.selectbox(
        "Selecione um munic√≠pio para an√°lise detalhada",
        options=selected_municipalities
    )
    
    # Criar gr√°fico de s√©rie temporal
    with st.spinner("Gerando s√©rie temporal..."):
        fig = create_time_series_plot(air_data, selected_mun, standard)
        st.plotly_chart(fig, use_container_width=True)
    
    # Resumo dos poluentes
    st.subheader("Resumo dos Poluentes")
    
    # Filtrar dados para o munic√≠pio
    mun_data = air_data[air_data['Munic√≠pio'] == selected_mun]
    
    # Criar tabela de resumo
    pollutants = ['MP10', 'MP2.5', 'O3', 'NO2', 'SO2', 'CO', 'AOD']
    summary_data = []
    
    for pollutant in pollutants:
        # Obter estat√≠sticas
        mean_val = mun_data[pollutant].mean()
        max_val = mun_data[pollutant].max()
        min_val = mun_data[pollutant].min()
        std_val = mun_data[pollutant].std()
        
        # Obter limites
        if standard == "CONAMA":
            limit = {
                'MP10': 50, 'MP2.5': 25, 'O3': 100,
                'NO2': 200, 'SO2': 20, 'CO': 9, 'AOD': 0.1
            }[pollutant]
            
            cat_col = f'Categoria_{pollutant}'
        else:  # WHO
            limit = {
                'MP10': 15, 'MP2.5': 5, 'O3': 60,
                'NO2': 25, 'SO2': 40, 'CO': 4, 'AOD': 0.05
            }[pollutant]
            
            cat_col = f'Categoria_WHO_{pollutant}'
        
        # Calcular exced√™ncias
        exceedances = (mun_data[pollutant] > limit).sum()
        exceedance_pct = exceedances / len(mun_data) * 100
        
        # Categoria predominante
        cat_counts = mun_data[cat_col].value_counts()
        predominant_cat = cat_counts.index[0] if not cat_counts.empty else "N/A"
        
        # Adicionar unidades
        units = {
            'MP10': 'Œºg/m¬≥', 'MP2.5': 'Œºg/m¬≥', 'O3': 'Œºg/m¬≥',
            'NO2': 'Œºg/m¬≥', 'SO2': 'Œºg/m¬≥', 'CO': 'ppm', 'AOD': ''
        }[pollutant]
        
        # Adicionar √† lista
        summary_data.append({
            'Poluente': pollutant,
            'M√©dia': f"{mean_val:.2f} {units}",
            'M√°ximo': f"{max_val:.2f} {units}",
            'M√≠nimo': f"{min_val:.2f} {units}",
            'Desvio Padr√£o': f"{std_val:.2f}",
            'Exced√™ncias': f"{exceedances} dias ({exceedance_pct:.1f}%)",
            'Categoria Predominante': predominant_cat
        })
    
    # Criar dataframe
    summary_df = pd.DataFrame(summary_data)
    
    # Mostrar tabela
    st.dataframe(summary_df, use_container_width=True)
    
    # Op√ß√£o para download dos dados
    st.download_button(
        label="‚¨áÔ∏è Baixar Dados Completos (CSV)",
        data=mun_data.to_csv(index=False).encode('utf-8'),
        file_name=f"qualidade_ar_{selected_mun}_{start_date}_a_{end_date}.csv",
        mime="text/csv"
    )

with tab3:
    st.header("üó∫Ô∏è Mapa de Qualidade do Ar")
    
    # Selecionar data e poluente para o mapa
    col1, col2 = st.columns(2)
    
    with col1:
        selected_date = st.date_input(
            "Selecione uma data para visualizar o mapa",
            value=pd.to_datetime(air_data['Data'].min()).date()
        )
    
    with col2:
        # Op√ß√µes: Categoria geral ou poluente espec√≠fico
        pollutant_options = ['Categoria_Geral', 'MP10', 'MP2.5', 'O3', 'NO2', 'SO2', 'CO', 'AOD']
        selected_pollutant = st.selectbox(
            "Selecione o par√¢metro a visualizar",
            options=pollutant_options,
            format_func=lambda x: "Qualidade Geral" if x == "Categoria_Geral" else x
        )
    
    # Converter para datetime
    selected_datetime = pd.to_datetime(selected_date)
    
    # Verificar se h√° dados para a data
    if not air_data[air_data['Data'].dt.date == selected_date].empty:
        # Criar mapa
        with st.spinner("Gerando mapa..."):
            fig = create_air_quality_map(air_data, ms_municipalities, selected_datetime, selected_pollutant, standard)
            
            if fig:
                st.plotly_chart(fig, use_container_width=True)
                
                # Adicionar legenda
                if selected_pollutant == 'Categoria_Geral':
                    st.markdown("""
                    ### Legenda de Qualidade do Ar
                    - üîµ **Boa**: Qualidade do ar satisfat√≥ria, com m√≠nimo ou nenhum risco √† sa√∫de.
                    - üü¢ **Moderada**: Qualidade do ar aceit√°vel, mas pode haver risco para pessoas muito sens√≠veis.
                    - üü° **Ruim**: Membros de grupos sens√≠veis podem ter efeitos na sa√∫de.
                    - üü† **Muito Ruim**: Todos podem come√ßar a sentir efeitos na sa√∫de, grupos sens√≠veis podem ter efeitos mais graves.
                    - üî¥ **P√©ssima**: Alerta de sa√∫de. Toda a popula√ß√£o pode ter riscos de sa√∫de mais s√©rios.
                    """)
                else:
                    # Informa√ß√µes sobre o poluente selecionado
                    pollutant_info = {
                        'MP10': """
                        **Material Particulado (MP10)** - Part√≠culas inal√°veis com di√¢metro menor que 10 micr√¥metros.
                        - **Fontes**: Queimadas, constru√ß√£o civil, ressuspens√£o de poeira, ind√∫strias.
                        - **Efeitos na sa√∫de**: Agravamento de asma, diminui√ß√£o da fun√ß√£o pulmonar, aumento de doen√ßas respirat√≥rias.
                        - **Limite CONAMA**: 50 Œºg/m¬≥ (m√©dia de 24h)
                        - **Limite OMS**: 15 Œºg/m¬≥ (m√©dia de 24h)
                        """,
                        'MP2.5': """
                        **Material Particulado Fino (MP2.5)** - Part√≠culas inal√°veis com di√¢metro menor que 2,5 micr√¥metros.
                        - **Fontes**: Queimadas, ve√≠culos a diesel, processos industriais, forma√ß√£o secund√°ria na atmosfera.
                        - **Efeitos na sa√∫de**: Penetra profundamente nos pulm√µes e na corrente sangu√≠nea, causando problemas respirat√≥rios e cardiovasculares.
                        - **Limite CONAMA**: 25 Œºg/m¬≥ (m√©dia de 24h)
                        - **Limite OMS**: 5 Œºg/m¬≥ (m√©dia de 24h)
                        """,
                        'O3': """
                        **Oz√¥nio (O3)** - Poluente secund√°rio formado por rea√ß√µes fotoqu√≠micas.
                        - **Fontes**: Formado pela rea√ß√£o de NOx e COVs na presen√ßa de luz solar.
                        - **Efeitos na sa√∫de**: Irrita√ß√£o nos olhos e vias respirat√≥rias, redu√ß√£o da fun√ß√£o pulmonar, agravamento de asma.
                        - **Limite CONAMA**: 100 Œºg/m¬≥ (m√©dia de 8h)
                        - **Limite OMS**: 60 Œºg/m¬≥ (m√©dia de 8h)
                        """,
                        'NO2': """
                        **Di√≥xido de Nitrog√™nio (NO2)** - G√°s poluente prim√°rio e precursor de outros poluentes.
                        - **Fontes**: Ve√≠culos automotores, usinas termel√©tricas, ind√∫strias.
                        - **Efeitos na sa√∫de**: Irrita√ß√£o do sistema respirat√≥rio, redu√ß√£o da capacidade pulmonar, aumento de infec√ß√µes respirat√≥rias.
                        - **Limite CONAMA**: 200 Œºg/m¬≥ (m√©dia de 1h)
                        - **Limite OMS**: 25 Œºg/m¬≥ (m√©dia de 24h)
                        """,
                        'SO2': """
                        **Di√≥xido de Enxofre (SO2)** - G√°s poluente prim√°rio.
                        - **Fontes**: Queima de combust√≠veis com enxofre, termel√©tricas, ind√∫strias.
                        - **Efeitos na sa√∫de**: Irrita√ß√£o dos olhos, nariz e garganta, agravamento de doen√ßas respirat√≥rias, especialmente asma.
                        - **Limite CONAMA**: 20 Œºg/m¬≥ (m√©dia de 24h)
                        - **Limite OMS**: 40 Œºg/m¬≥ (m√©dia de 24h)
                        """,
                        'CO': """
                        **Mon√≥xido de Carbono (CO)** - G√°s t√≥xico sem cor ou odor.
                        - **Fontes**: Ve√≠culos, queimadas, combust√£o incompleta.
                        - **Efeitos na sa√∫de**: Reduz a capacidade do sangue de transportar oxig√™nio, causando dores de cabe√ßa, tonturas e at√© morte.
                        - **Limite CONAMA**: 9 ppm (m√©dia de 8h)
                        - **Limite OMS**: 4 ppm (m√©dia de 8h)
                        """,
                        'AOD': """
                        **Profundidade √ìptica de Aeross√≥is (AOD)** - Medida da quantidade de luz bloqueada por part√≠culas suspensas.
                        - **Fontes**: Queimadas, poeira, spray marinho, emiss√µes urbanas e industriais.
                        - **Significado**: Valores mais altos indicam maior concentra√ß√£o de aeross√≥is e pior qualidade do ar.
                        - **Interpreta√ß√£o**:
                          - AOD < 0.1: C√©u limpo, boa qualidade do ar
                          - AOD 0.1-0.3: Qualidade moderada
                          - AOD 0.3-0.5: Qualidade ruim
                          - AOD > 0.5: Qualidade muito ruim a p√©ssima
                        """
                    }
                    
                    st.markdown(f"### Informa√ß√µes sobre {selected_pollutant}")
                    st.markdown(pollutant_info.get(selected_pollutant, ""))
    else:
        st.warning(f"N√£o h√° dados dispon√≠veis para a data {selected_date.strftime('%d/%m/%Y')}.")

with tab4:
    st.header("üé¨ Anima√ß√£o de Concentra√ß√£o de Poluentes")
    
    # Sele√ß√£o de per√≠odo e poluente para anima√ß√£o
    st.subheader("Configura√ß√µes da Anima√ß√£o")
    
    col1, col2 = st.columns(2)
    
    with col1:
        anim_start_date = st.date_input(
            "Data inicial da anima√ß√£o",
            value=start_date,
            key="anim_start_date"
        )
        
        anim_end_date = st.date_input(
            "Data final da anima√ß√£o",
            value=min(start_date + timedelta(days=6), end_date),
            key="anim_end_date"
        )
    
    with col2:
        # Selecionar poluente para anima√ß√£o
        anim_pollutant = st.selectbox(
            "Par√¢metro a animar",
            options=['Categoria_Geral', 'MP10', 'MP2.5', 'O3', 'NO2', 'SO2', 'CO', 'AOD'],
            format_func=lambda x: "Qualidade Geral" if x == "Categoria_Geral" else x,
            key="anim_pollutant"
        )
    
    # Bot√£o para gerar anima√ß√£o
    if st.button("üé¨ Gerar Anima√ß√£o de Concentra√ß√£o", type="primary"):
        if (anim_end_date - anim_start_date).days > 14:
            st.warning("Por favor, selecione um per√≠odo de no m√°ximo 14 dias para a anima√ß√£o.")
        elif anim_start_date > anim_end_date:
            st.error("A data inicial deve ser anterior √† data final.")
        else:
            # Gerar anima√ß√£o avan√ßada
            with st.spinner("Gerando anima√ß√£o de concentra√ß√£o..."):
                animation_fig = create_pollutant_animation(
                    air_data, 
                    ms_municipalities, 
                    pd.to_datetime(anim_start_date), 
                    pd.to_datetime(anim_end_date), 
                    anim_pollutant, 
                    standard
                )
            
            if animation_fig:
                st.plotly_chart(animation_fig, use_container_width=True)
                
                st.success("Anima√ß√£o gerada com sucesso! Use os controles abaixo da visualiza√ß√£o para reproduzir a anima√ß√£o.")
                
                # Explica√ß√µes sobre a anima√ß√£o
                st.markdown("""
                ### Como usar a anima√ß√£o:
                
                - Use o bot√£o **‚ñ∂Ô∏è Play** para iniciar a anima√ß√£o autom√°tica
                - Use o bot√£o **‚è∏Ô∏è Pause** para pausar a anima√ß√£o
                - Voc√™ tamb√©m pode arrastar o slider para visualizar uma data espec√≠fica
                - Passe o mouse sobre os pontos ou √°reas para ver detalhes
                
                Esta anima√ß√£o mostra a evolu√ß√£o espacial da concentra√ß√£o do poluente selecionado ao longo do tempo.
                Para poluentes espec√≠ficos, √© utilizada interpola√ß√£o espacial para criar uma visualiza√ß√£o cont√≠nua das concentra√ß√µes.
                """)
            else:
                st.warning("N√£o foi poss√≠vel gerar a anima√ß√£o. Verifique os dados e tente novamente.")

with tab5:
    st.header("üìù Relat√≥rios de Qualidade do Ar")
    
    # Selecionar munic√≠pio para relat√≥rio
    report_mun = st.selectbox(
        "Selecione um munic√≠pio para gerar relat√≥rio",
        options=selected_municipalities,
        key="report_municipality"
    )
    
    # Gerar relat√≥rio
    if st.button("üîç Gerar Relat√≥rio Detalhado"):
        with st.spinner("Gerando relat√≥rio..."):
            report = generate_air_quality_report(air_data, report_mun, start_date, end_date, standard)
            
            # Mostrar relat√≥rio
            st.subheader(f"Relat√≥rio de Qualidade do Ar - {report_mun}")
            st.markdown(f"""
            ### Informa√ß√µes Gerais
            - **Munic√≠pio**: {report['Munic√≠pio']}
            - **Per√≠odo**: {report['Per√≠odo']['In√≠cio'].strftime('%d/%m/%Y')} a {report['Per√≠odo']['Fim'].strftime('%d/%m/%Y')} ({report['Per√≠odo']['Total de Dias']} dias)
            - **Padr√£o Utilizado**: {report['Padr√£o']}
            """)
            
            # Mostrar distribui√ß√£o de categorias
            st.subheader("Distribui√ß√£o de Categorias")
            
            # Criar gr√°fico de pizza
            categories = ['Boa', 'Moderada', 'Ruim', 'Muito Ruim', 'P√©ssima']
            colors = ['#00ccff', '#009933', '#ffff00', '#ff9933', '#ff0000']
            
            cat_values = []
            for cat in categories:
                cat_values.append(report['Categorias'].get(cat, 0))
            
            fig = px.pie(
                values=cat_values,
                names=categories,
                title=f"Distribui√ß√£o de Categorias - {report_mun}",
                color_discrete_sequence=colors
            )
            st.plotly_chart(fig)
            
            # Estat√≠sticas dos poluentes
            st.subheader("Estat√≠sticas por Poluente")
            
            # Criar colunas para cada poluente
            cols = st.columns(3)
            pollutants = list(report['Estat√≠sticas'].keys())
            
            for i, pollutant in enumerate(pollutants):
                col_idx = i % 3
                with cols[col_idx]:
                    stats = report['Estat√≠sticas'][pollutant]
                    
                    # Obter unidade
                    unit = 'ppm' if pollutant == 'CO' else ('adimensional' if pollutant == 'AOD' else 'Œºg/m¬≥')
                    
                    st.markdown(f"""
                    #### {pollutant}
                    - **M√©dia**: {stats['M√©dia']:.2f} {unit}
                    - **M√°ximo**: {stats['M√°ximo']:.2f} {unit}
                    - **M√≠nimo**: {stats['M√≠nimo']:.2f} {unit}
                    - **Desvio Padr√£o**: {stats['Desvio Padr√£o']:.2f}
                    """)
                    
                    # Adicionar dia cr√≠tico se dispon√≠vel
                    if pollutant in report['Dias Cr√≠ticos']:
                        critical_day = report['Dias Cr√≠ticos'][pollutant]
                        st.markdown(f"""
                        **Dia Cr√≠tico**: {critical_day['Data'].strftime('%d/%m/%Y')}  
                        **Valor**: {critical_day['Valor']:.2f} {unit}  
                        **Categoria**: {critical_day['Categoria']}
                        """)
            
            # Observa√ß√µes finais
            st.subheader("Recomenda√ß√µes e Observa√ß√µes")
            
            # Determinar recomenda√ß√µes com base na categoria predominante
            predominant_cat = max(report['Categorias'], key=report['Categorias'].get) if report['Categorias'] else "N/A"
            
            recommendations = {
                'Boa': """
                A qualidade do ar est√° satisfat√≥ria. Continue monitorando, mas n√£o s√£o necess√°rias medidas espec√≠ficas.
                """,
                'Moderada': """
                A qualidade do ar est√° aceit√°vel, mas pode haver riscos para pessoas muito sens√≠veis.
                - Pessoas com doen√ßas respirat√≥rias ou card√≠acas devem limitar esfor√ßos prolongados ao ar livre.
                - Recomenda-se continuar o monitoramento regular da qualidade do ar.
                """,
                'Ruim': """
                A qualidade do ar apresenta riscos para grupos sens√≠veis.
                - Pessoas com doen√ßas respirat√≥rias ou card√≠acas, idosos e crian√ßas devem evitar esfor√ßos prolongados ao ar livre.
                - Recomenda-se intensificar o monitoramento e implementar medidas de controle de emiss√µes.
                - Considerar campanhas de conscientiza√ß√£o sobre a qualidade do ar.
                """,
                'Muito Ruim': """
                A qualidade do ar est√° insalubre e pode afetar toda a popula√ß√£o.
                - Todos devem limitar atividades ao ar livre, especialmente grupos sens√≠veis.
                - Recomenda-se implementar medidas de controle de emiss√µes de forma urgente.
                - Considerar a emiss√£o de alertas de sa√∫de p√∫blica.
                - Intensificar a fiscaliza√ß√£o de fontes poluidoras.
                """,
                'P√©ssima': """
                A qualidade do ar est√° perigosa para a sa√∫de.
                - Todos devem evitar atividades ao ar livre.
                - Recomenda-se implementar medidas emergenciais de controle de polui√ß√£o.
                - Emitir alertas de sa√∫de p√∫blica e considerar a suspens√£o de atividades em escolas e locais p√∫blicos.
                - Implementar rod√≠zio de ve√≠culos se aplic√°vel.
                - Suspender atividades industriais com altas emiss√µes temporariamente.
                """
            }
            
            st.markdown(recommendations.get(predominant_cat, "N√£o h√° recomenda√ß√µes dispon√≠veis."))
            
            # Op√ß√£o para download do relat√≥rio em formato JSON
            report_json = json.dumps(
                {
                    'Munic√≠pio': report['Munic√≠pio'],
                    'Per√≠odo': {
                        'In√≠cio': report['Per√≠odo']['In√≠cio'].strftime('%d/%m/%Y'),
                        'Fim': report['Per√≠odo']['Fim'].strftime('%d/%m/%Y'),
                        'Total de Dias': report['Per√≠odo']['Total de Dias']
                    },
                    'Padr√£o': report['Padr√£o'],
                    'Categorias': report['Categorias'],
                    'Estat√≠sticas': {
                        p: {k: float(v) for k, v in stats.items()} 
                        for p, stats in report['Estat√≠sticas'].items()
                    },
                    'Dias Cr√≠ticos': {
                        p: {
                            'Data': day['Data'].strftime('%d/%m/%Y'),
                            'Valor': float(day['Valor']),
                            'Categoria': day['Categoria']
                        } 
                        for p, day in report['Dias Cr√≠ticos'].items()
                    },
                    'Recomenda√ß√µes': recommendations.get(predominant_cat, "N√£o h√° recomenda√ß√µes dispon√≠veis.")
                },
                ensure_ascii=False,
                indent=4
            )
            
            st.download_button(
                label="‚¨áÔ∏è Baixar Relat√≥rio (JSON)",
                data=report_json.encode('utf-8'),
                file_name=f"relatorio_{report_mun}_{start_date}_a_{end_date}.json",
                mime="application/json"
            )
            
            # Op√ß√£o para download do relat√≥rio em PDF (simula√ß√£o)
            st.markdown("""
            Para gerar relat√≥rios em PDF, seria necess√°rio implementar uma biblioteca adicional como ReportLab ou pdfkit.
            Esta funcionalidade pode ser adicionada em vers√µes futuras do aplicativo.
            """)

with tab6:
    st.header("üîÆ Previs√£o da Qualidade do Ar")
    
    # Selecionar munic√≠pio para previs√£o
    forecast_mun = st.selectbox(
        "Selecione um munic√≠pio para previs√£o",
        options=selected_municipalities,
        key="forecast_municipality"
    )
    
    # Selecionar n√∫mero de dias para previs√£o
    forecast_days = st.slider(
        "N√∫mero de dias para previs√£o",
        min_value=1,
        max_value=7,
        value=5,
        key="forecast_days"
    )
    
    # Bot√£o para gerar previs√£o
    if st.button("üîÆ Gerar Previs√£o", key="generate_forecast"):
        with st.spinner("Gerando previs√£o de qualidade do ar..."):
            # Obter dados de previs√£o
            forecast_data = get_air_quality_forecast([forecast_mun], forecast_days)
            
            if forecast_data is not None and not forecast_data.empty:
                # Classificar dados de previs√£o
                forecast_data = classify_air_quality_conama(forecast_data)
                forecast_data = classify_air_quality_who(forecast_data)
                
                # Filtrar para o munic√≠pio selecionado
                mun_forecast = forecast_data[forecast_data['Munic√≠pio'] == forecast_mun]
                
                # Mostrar previs√£o em formato de cards
                st.subheader(f"Previs√£o para {forecast_mun} - Pr√≥ximos {forecast_days} dias")
                
                # Seletor de padr√£o para previs√£o
                forecast_standard = st.radio(
                    "Padr√£o para previs√£o",
                    options=["CONAMA", "OMS"],
                    horizontal=True,
                    key="forecast_standard"
                )
                
                # Selecionar coluna de categoria
                cat_col = 'Categoria_Geral' if forecast_standard == 'CONAMA' else 'Categoria_Geral_WHO'
                
                # Criar cards para cada dia
                cols = st.columns(min(forecast_days, 5))
                
                for i, (_, row) in enumerate(mun_forecast.iterrows()):
                    if i >= len(cols):
                        break
                        
                    with cols[i]:
                        date = row['Data'].strftime('%d/%m/%Y')
                        category = row[cat_col]
                        
                        # Cores para as categorias
                        cat_colors = {
                            'Boa': '#00ccff',
                            'Moderada': '#009933',
                            'Ruim': '#ffff00',
                            'Muito Ruim': '#ff9933',
                            'P√©ssima': '#ff0000'
                        }
                        
                        color = cat_colors.get(category, '#cccccc')
                        
                        # Criar card
                        st.markdown(f"""
                        <div style="padding: 10px; border-radius: 5px; background-color: {color}; color: {'black' if category in ['Boa', 'Moderada', 'Ruim'] else 'white'}; text-align: center;">
                            <h4>{date}</h4>
                            <h3>{category}</h3>
                            <p>MP10: {row['MP10']:.1f} Œºg/m¬≥</p>
                            <p>MP2.5: {row['MP2.5']:.1f} Œºg/m¬≥</p>
                            <p>O3: {row['O3']:.1f} Œºg/m¬≥</p>
                        </div>
                        """, unsafe_allow_html=True)
                
                # Gr√°fico de previs√£o
                st.subheader("Gr√°fico de Previs√£o")
                
                # Criar figura para previs√£o
                fig = go.Figure()
                
                # Adicionar linha para cada poluente
                pollutants = ['MP10', 'MP2.5', 'O3', 'NO2', 'SO2', 'CO']
                colors = px.colors.qualitative.Plotly
                
                for i, pollutant in enumerate(pollutants):
                    fig.add_trace(go.Scatter(
                        x=mun_forecast['Data'],
                        y=mun_forecast[pollutant],
                        mode='lines+markers',
                        name=pollutant,
                        line=dict(color=colors[i % len(colors)], width=2),
                        marker=dict(size=8)
                    ))
                
                # Adicionar linha para categoria
                cat_map = {'Boa': 0, 'Moderada': 1, 'Ruim': 2, 'Muito Ruim': 3, 'P√©ssima': 4}
                mun_forecast['cat_num'] = mun_forecast[cat_col].map(cat_map)
                
                # Adicionar eixo secund√°rio para categorias
                fig.add_trace(go.Scatter(
                    x=mun_forecast['Data'],
                    y=mun_forecast['cat_num'],
                    mode='lines+markers',
                    name='Qualidade do Ar',
                    line=dict(color='black', width=3, dash='dot'),
                    marker=dict(
                        size=12,
                        color=mun_forecast[cat_col].map(lambda c: cat_colors.get(c, '#cccccc'))
                    ),
                    yaxis='y2'
                ))
                
                # Atualizar layout
                fig.update_layout(
                    title=f"Previs√£o de Qualidade do Ar - {forecast_mun}",
                    xaxis=dict(title='Data'),
                    yaxis=dict(title='Concentra√ß√£o'),
                    yaxis2=dict(
                        title='Categoria',
                        titlefont=dict(color='black'),
                        tickfont=dict(color='black'),
                        overlaying='y',
                        side='right',
                        tickvals=[0, 1, 2, 3, 4],
                        ticktext=['Boa', 'Moderada', 'Ruim', 'Muito Ruim', 'P√©ssima']
                    ),
                    legend=dict(orientation='h', yanchor='bottom', y=1.02),
                    height=500
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Adicionar texto explicativo
                st.markdown("""
                ### Sobre a Previs√£o
                
                Esta previs√£o √© baseada nos dados do Servi√ßo de Monitoramento da Atmosfera Copernicus (CAMS), 
                um servi√ßo que fornece dados cont√≠nuos de qualidade do ar e composi√ß√£o atmosf√©rica.
                
                Os dados s√£o processados de acordo com os padr√µes selecionados (CONAMA ou OMS) e mostram 
                a evolu√ß√£o prevista dos principais poluentes e da qualidade geral do ar para os pr√≥ximos dias.
                
                **Observa√ß√£o:** As previs√µes t√™m maior precis√£o para os primeiros dias e podem estar sujeitas 
                a varia√ß√µes dependendo de condi√ß√µes meteorol√≥gicas n√£o previstas e eventos como queimadas.
                """)
                
                # Adicionar bot√£o para download dos dados de previs√£o
                csv = mun_forecast.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="‚¨áÔ∏è Baixar Dados da Previs√£o (CSV)",
                    data=csv,
                    file_name=f"previsao_{forecast_mun}_{datetime.now().strftime('%Y%m%d')}.csv",
                    mime="text/csv"
                )
            else:
                st.error("N√£o foi poss√≠vel obter dados de previs√£o. Tente novamente mais tarde.")

# Adicionar informa√ß√µes na parte inferior
st.markdown("---")
st.markdown("""
### üåç Dados do Copernicus Atmosphere Monitoring Service (CAMS)

Este aplicativo utiliza dados do Servi√ßo de Monitoramento da Atmosfera Copernicus (CAMS), uma 
iniciativa da Uni√£o Europeia que fornece informa√ß√µes cont√≠nuas sobre a qualidade do ar e a 
composi√ß√£o atmosf√©rica em escala global e regional.

**Informa√ß√µes sobre os dados:**
- MP10 e MP2.5: Material particulado com di√¢metro inferior a 10 e 2,5 micr√¥metros, respectivamente.
- O3: Oz√¥nio, um poluente secund√°rio formado por rea√ß√µes fotoqu√≠micas.
- NO2: Di√≥xido de nitrog√™nio, principalmente de fontes de combust√£o como ve√≠culos.
- SO2: Di√≥xido de enxofre, de fontes industriais e queima de combust√≠veis com enxofre.
- CO: Mon√≥xido de carbono, de combust√£o incompleta.
- AOD: Profundidade √ìptica de Aeross√≥is, uma medida da quantidade de aeross√≥is na atmosfera.

Para mais informa√ß√µes sobre o CAMS, visite [https://atmosphere.copernicus.eu/](https://atmosphere.copernicus.eu/)

### üìä Refer√™ncias de Qualidade do Ar

#### Resolu√ß√£o CONAMA n¬∫ 491/2018
A Resolu√ß√£o CONAMA n¬∫ 491/2018 estabelece os padr√µes de qualidade do ar no Brasil, definindo limites para concentra√ß√µes de poluentes atmosf√©ricos.

**Poluentes Regulamentados:**
- MP10 (Part√≠culas Inal√°veis): 50 Œºg/m¬≥ (m√©dia de 24h)
- MP2.5 (Part√≠culas Inal√°veis Finas): 25 Œºg/m¬≥ (m√©dia de 24h)
- O3 (Oz√¥nio): 100 Œºg/m¬≥ (m√©dia de 8h)
- NO2 (Di√≥xido de Nitrog√™nio): 200 Œºg/m¬≥ (m√©dia de 1h)
- SO2 (Di√≥xido de Enxofre): 20 Œºg/m¬≥ (m√©dia de 24h)
- CO (Mon√≥xido de Carbono): 9 ppm (m√©dia de 8h)

#### Diretrizes da OMS (2021)
A Organiza√ß√£o Mundial da Sa√∫de (OMS) atualizou suas diretrizes de qualidade do ar em 2021, estabelecendo limites mais restritivos.

**Limites Recomendados:**
- MP10 (Part√≠culas Inal√°veis): 15 Œºg/m¬≥ (m√©dia de 24h)
- MP2.5 (Part√≠culas Inal√°veis Finas): 5 Œºg/m¬≥ (m√©dia de 24h)
- O3 (Oz√¥nio): 60 Œºg/m¬≥ (m√©dia de 8h)
- NO2 (Di√≥xido de Nitrog√™nio): 25 Œºg/m¬≥ (m√©dia de 24h)
- SO2 (Di√≥xido de Enxofre): 40 Œºg/m¬≥ (m√©dia de 24h)
- CO (Mon√≥xido de Carbono): 4 ppm (m√©dia de 8h)

### üè• Efeitos na Sa√∫de

- **Boa**: Qualidade do ar satisfat√≥ria, com m√≠nimo ou nenhum risco √† sa√∫de.
- **Moderada**: Qualidade do ar aceit√°vel, mas pode haver risco para pessoas muito sens√≠veis.
- **Ruim**: Membros de grupos sens√≠veis podem ter efeitos na sa√∫de.
- **Muito Ruim**: Todos podem come√ßar a sentir efeitos na sa√∫de, grupos sens√≠veis podem ter efeitos mais graves.
- **P√©ssima**: Alerta de sa√∫de. Toda a popula√ß√£o pode ter riscos de sa√∫de mais s√©rios.

### üí® Fontes Comuns de Polui√ß√£o Atmosf√©rica em Mato Grosso do Sul

- **Queimadas**: Principal fonte de polui√ß√£o atmosf√©rica no estado, especialmente durante a esta√ß√£o seca.
- **Ve√≠culos**: Emiss√µes de ve√≠culos em centros urbanos como Campo Grande e Dourados.
- **Ind√∫strias**: Processamento de cana-de-a√ß√∫car, frigor√≠ficos, papel e celulose.
- **Agropecu√°ria**: Poeira de solo, ressuspens√£o e emiss√µes de implementos agr√≠colas.
- **Atividades mineradoras**: Principalmente na regi√£o de Corumb√°.

---

Sistema desenvolvido para monitoramento da qualidade do ar no estado de Mato Grosso do Sul - Brasil.
Utiliza dados do Servi√ßo de Monitoramento da Atmosfera Copernicus (CAMS).
""")

# Adicionar cr√©ditos e vers√£o
st.sidebar.markdown("---")
st.sidebar.markdown("""
### üîÑ Vers√£o 2.0
**Novas funcionalidades:**
- Integra√ß√£o com dados reais do CAMS
- Previs√£o da qualidade do ar
- Anima√ß√£o avan√ßada de concentra√ß√£o de poluentes
- Interpola√ß√£o espacial para visualiza√ß√£o cont√≠nua
""")

# Informa√ß√µes sobre o CAMS na sidebar
st.sidebar.markdown("---")
st.sidebar.info("""
**Dados fornecidos por:**  
[Copernicus Atmosphere Monitoring Service (CAMS)](https://atmosphere.copernicus.eu/)
""")
