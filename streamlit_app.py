import cdsapi
import xarray as xr
import numpy as np
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from matplotlib import animation
import streamlit as st
from datetime import datetime, timedelta
import os
import pandas as pd
import geopandas as gpd
import io
import requests
from matplotlib.patches import PathPatch
from matplotlib.path import Path
from sklearn.linear_model import LinearRegression
import matplotlib.dates as mdates
from scipy import stats

# Configura√ß√£o inicial da p√°gina
st.set_page_config(layout="wide", page_title="Monitor PM2.5/PM10 - MS", page_icon="üåç")

# ‚úÖ Carregar autentica√ß√£o a partir do secrets.toml
try:
    ads_url = st.secrets["ads"]["url"]
    ads_key = st.secrets["ads"]["key"]
    client = cdsapi.Client(url=ads_url, key=ads_key)
except Exception as e:
    st.error("‚ùå Erro ao carregar as credenciais do CDS API. Verifique seu secrets.toml.")
    st.stop()

# Fun√ß√£o para baixar shapefile dos munic√≠pios de MS (modificada)
@st.cache_data
def load_ms_municipalities():
    try:
        url = "https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/" + \
              "municipio_2022/UFs/MS/MS_Municipios_2022.zip"
        
        try:
            gdf = gpd.read_file(url)
            # Garantir que temos a coluna de nome do munic√≠pio
            if 'NM_MUN' not in gdf.columns and 'NM_MUNICIP' in gdf.columns:
                gdf['NM_MUN'] = gdf['NM_MUNICIP']
            elif 'NM_MUN' not in gdf.columns and 'NOME' in gdf.columns:
                gdf['NM_MUN'] = gdf['NOME']
            return gdf
        except Exception as e:
            st.warning(f"Erro ao carregar shapefile oficial do IBGE: {e}")
            # Fallback com dados mais realistas
            return create_fallback_shapefile()
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel carregar os shapes dos munic√≠pios: {str(e)}")
        return create_fallback_shapefile()

cities = {
    "√Ågua Clara": [-20.4453, -52.8792],
    "Alcin√≥polis": [-18.3255, -53.7042],
    "Amambai": [-23.1058, -55.2253],
    "Anast√°cio": [-20.4823, -55.8104],
    "Anauril√¢ndia": [-22.1852, -52.7191],
    "Ang√©lica": [-22.1527, -53.7708],
    "Ant√¥nio Jo√£o": [-22.1927, -55.9511],
    "Aparecida do Taboado": [-20.0873, -51.0961],
    "Aquidauana": [-20.4697, -55.7868],
    "Aral Moreira": [-22.9384, -55.6331],
    "Bandeirantes": [-19.9279, -54.3581],
    "Bataguassu": [-21.7156, -52.4233],
    "Bataypor√£": [-22.2947, -53.2705],
    "Bela Vista": [-22.1073, -56.5263],
    "Bodoquena": [-20.5372, -56.7138],
    "Bonito": [-21.1261, -56.4836],
    "Brasil√¢ndia": [-21.2544, -52.0382],
    "Caarap√≥": [-22.6368, -54.8209],
    "Camapu√£": [-19.5302, -54.0431],
    "Campo Grande": [-20.4697, -54.6201],
    "Caracol": [-22.0112, -57.0278],
    "Cassil√¢ndia": [-19.1179, -51.7308],
    "Chapad√£o do Sul": [-18.7908, -52.6260],
    "Corguinho": [-19.8243, -54.8281],
    "Coronel Sapucaia": [-23.2724, -55.5278],
    "Corumb√°": [-19.0082, -57.651],
    "Costa Rica": [-18.5432, -53.1287],
    "Coxim": [-18.5013, -54.7603],
    "Deod√°polis": [-22.2789, -54.1583],
    "Dois Irm√£os do Buriti": [-20.6845, -55.2915],
    "Douradina": [-22.0430, -54.6158],
    "Dourados": [-22.2231, -54.812],
    "Eldorado": [-23.7868, -54.2836],
    "F√°tima do Sul": [-22.3789, -54.5131],
    "Figueir√£o": [-18.6782, -53.6380],
    "Gl√≥ria de Dourados": [-22.4136, -54.2336],
    "Guia Lopes da Laguna": [-21.4583, -56.1117],
    "Iguatemi": [-23.6835, -54.5635],
    "Inoc√™ncia": [-19.7276, -51.9281],
    "Itapor√£": [-22.0750, -54.7933],
    "Itaquira√≠": [-23.4779, -54.1873],
    "Ivinhema": [-22.3046, -53.8185],
    "Japor√£": [-23.8903, -54.4059],
    "Jaraguari": [-20.1386, -54.3996],
    "Jardim": [-21.4799, -56.1489],
    "Jate√≠": [-22.4806, -54.3078],
    "Juti": [-22.8596, -54.6060],
    "Lad√°rio": [-19.0090, -57.5973],
    "Laguna Carap√£": [-22.5448, -55.1502],
    "Maracaju": [-21.6105, -55.1695],
    "Miranda": [-20.2407, -56.3780],
    "Mundo Novo": [-23.9355, -54.2807],
    "Navira√≠": [-23.0618, -54.1995],
    "Nioaque": [-21.1419, -55.8296],
    "Nova Alvorada do Sul": [-21.4657, -54.3825],
    "Nova Andradina": [-22.2332, -53.3437],
    "Novo Horizonte do Sul": [-22.6693, -53.8601],
    "Para√≠so das √Åguas": [-19.0218, -53.0116],
    "Parana√≠ba": [-19.6746, -51.1909],
    "Paranhos": [-23.8905, -55.4289],
    "Pedro Gomes": [-18.0996, -54.5507],
    "Ponta Por√£": [-22.5334, -55.7271],
    "Porto Murtinho": [-21.6981, -57.8825],
    "Ribas do Rio Pardo": [-20.4432, -53.7588],
    "Rio Brilhante": [-21.8033, -54.5427],
    "Rio Negro": [-19.4473, -54.9859],
    "Rio Verde de Mato Grosso": [-18.9249, -54.8434],
    "Rochedo": [-19.9566, -54.8940],
    "Santa Rita do Pardo": [-21.3016, -52.8333],
    "S√£o Gabriel do Oeste": [-19.3950, -54.5507],
    "Selv√≠ria": [-20.3637, -51.4192],
    "Sete Quedas": [-23.9710, -55.0396],
    "Sidrol√¢ndia": [-20.9302, -54.9692],
    "Sonora": [-17.5698, -54.7551],
    "Tacuru": [-23.6361, -55.0141],
    "Taquarussu": [-22.4898, -53.3519],
    "Terenos": [-20.4378, -54.8647],
    "Tr√™s Lagoas": [-20.7849, -51.7005],
    "Vicentina": [-22.4098, -54.4415]
}

def create_fallback_shapefile():
    """Cria um shapefile simplificado caso o oficial falhe"""
    # Criar pol√≠gonos aproximados para alguns munic√≠pios principais
    from shapely.geometry import Polygon
    
    municipalities_data = []
    for city_name, (lat, lon) in cities.items():
        # Criar um pol√≠gono aproximado (quadrado) ao redor de cada cidade
        buffer_size = 0.15  # Aproximadamente 15km
        polygon = Polygon([
            (lon - buffer_size, lat - buffer_size),
            (lon + buffer_size, lat - buffer_size),
            (lon + buffer_size, lat + buffer_size),
            (lon - buffer_size, lat + buffer_size),
            (lon - buffer_size, lat - buffer_size)
        ])
        municipalities_data.append({
            'NM_MUN': city_name,
            'geometry': polygon
        })
    
    return gpd.GeoDataFrame(municipalities_data, crs="EPSG:4326")

# Fun√ß√£o para criar mapa com enfoque em MS e contorno do munic√≠pio
def create_ms_focused_map(ds, pm25_var, city, lat_center, lon_center, ms_shapes, frame_idx=0):
    """
    Cria um mapa focado no Mato Grosso do Sul com:
    - Visualiza√ß√£o completa do estado
    - Contorno destacado do munic√≠pio selecionado
    - Dados de PM2.5 sobreposto
    """
    
    # Definir limites do Mato Grosso do Sul
    ms_bounds = {
        'north': -17.0,
        'south': -24.5,
        'east': -50.5,
        'west': -58.5
    }
    
    # Criar figura
    fig = plt.figure(figsize=(14, 12))
    ax = plt.subplot(1, 1, 1, projection=ccrs.PlateCarree())
    
    # Adicionar features b√°sicas do mapa
    ax.add_feature(cfeature.LAND, facecolor='lightgray', alpha=0.6)
    ax.add_feature(cfeature.OCEAN, facecolor='lightblue', alpha=0.3)
    ax.coastlines(resolution='50m', color='black', linewidth=0.8)
    ax.add_feature(cfeature.BORDERS.with_scale('50m'), linestyle='-', 
                   edgecolor='black', linewidth=1.5)
    ax.add_feature(cfeature.STATES.with_scale('50m'), linestyle='-', 
                   edgecolor='gray', linewidth=1.0, alpha=0.7)
    
    # Definir extens√£o para focar no MS
    ax.set_extent([ms_bounds['west'], ms_bounds['east'], 
                  ms_bounds['south'], ms_bounds['north']], 
                 crs=ccrs.PlateCarree())
    
    # Plotar contornos de todos os munic√≠pios de MS (suave)
    if ms_shapes is not None and not ms_shapes.empty:
        try:
            ms_shapes.boundary.plot(ax=ax, color='darkgray', linewidth=0.5, 
                                  alpha=0.6, transform=ccrs.PlateCarree())
        except Exception as e:
            st.warning(f"Erro ao plotar contornos municipais: {e}")
    
    # Sobrepor dados de PM2.5
    try:
        da = ds[pm25_var]
        
        # Selecionar frame apropriado
        if 'forecast_reference_time' in da.dims and 'forecast_period' in da.dims:
            if frame_idx < len(da.forecast_reference_time):
                frame_data = da.isel(forecast_reference_time=frame_idx, forecast_period=0).values
                frame_time = pd.to_datetime(ds.forecast_reference_time.values[frame_idx])
            else:
                frame_data = da.isel(forecast_reference_time=0, forecast_period=0).values
                frame_time = pd.to_datetime(ds.forecast_reference_time.values[0])
        else:
            time_dims = [d for d in da.dims if 'time' in d or 'forecast' in d]
            if time_dims:
                time_dim = time_dims[0]
                frame_idx = min(frame_idx, len(da[time_dim])-1)
                frame_data = da.isel({time_dim: frame_idx}).values
                frame_time = pd.to_datetime(da[time_dim].values[frame_idx])
            else:
                frame_data = da.values
                frame_time = datetime.now()
        
        # Converter unidades se necess√°rio
        if np.nanmax(frame_data) < 1:  # Provavelmente em kg/m¬≥
            frame_data = frame_data * 1e9  # Converter para Œºg/m¬≥
        
        # Definir limites de cores baseados nos dados
        vmin = max(0, np.nanmin(frame_data))
        vmax = min(200, np.nanpercentile(frame_data, 95))  # Usar percentil 95 para evitar outliers
        
        # Plotar dados de PM2.5
        im = ax.pcolormesh(ds.longitude, ds.latitude, frame_data, 
                          cmap='YlOrRd', vmin=vmin, vmax=vmax, 
                          transform=ccrs.PlateCarree(), alpha=0.8)
        
    except Exception as e:
        st.warning(f"Erro ao plotar dados de PM2.5: {e}")
        im = None
        frame_time = datetime.now()
    
    # Destacar o munic√≠pio selecionado
    if ms_shapes is not None and not ms_shapes.empty:
        try:
            # Encontrar o munic√≠pio selecionado
            selected_municipality = ms_shapes[
                ms_shapes['NM_MUN'].str.upper() == city.upper()
            ]
            
            if not selected_municipality.empty:
                # Plotar contorno destacado do munic√≠pio selecionado
                selected_municipality.boundary.plot(
                    ax=ax, color='red', linewidth=3.0, 
                    transform=ccrs.PlateCarree()
                )
                
                # Adicionar preenchimento semitransparente
                selected_municipality.plot(
                    ax=ax, facecolor='none', edgecolor='red', 
                    linewidth=3.0, alpha=0.8, transform=ccrs.PlateCarree()
                )
                
        except Exception as e:
            st.warning(f"Erro ao destacar munic√≠pio {city}: {e}")
    
    # Marcar a localiza√ß√£o da cidade com ponto
    ax.plot(lon_center, lat_center, marker='o', markersize=10,
            markeredgecolor='white', markerfacecolor='darkred', 
            markeredgewidth=2, transform=ccrs.PlateCarree(), 
            zorder=10)
    
    # Adicionar nome da cidade pr√≥ximo ao ponto
    ax.text(lon_center, lat_center + 0.2, city.upper(), 
            transform=ccrs.PlateCarree(), fontsize=12, fontweight='bold',
            ha='center', va='bottom', 
            bbox=dict(boxstyle='round,pad=0.3', facecolor='white', 
                     alpha=0.8, edgecolor='red'))
    
    # Grid e labels
    gl = ax.gridlines(draw_labels=True, linewidth=0.5, color='gray', 
                     alpha=0.5, linestyle='--')
    gl.top_labels = False
    gl.right_labels = False
    
    # T√≠tulo principal
    ax.set_title(f'Concentra√ß√£o PM2.5 - Mato Grosso do Sul\n{city} - {frame_time.strftime("%d/%m/%Y %H:%M UTC")}', 
                fontsize=16, fontweight='bold', pad=20)
    
    # Barra de cores
    if im is not None:
        # Posicionar barra de cores na parte inferior
        cax = fig.add_axes([0.15, 0.08, 0.7, 0.03])
        cbar = plt.colorbar(im, cax=cax, orientation='horizontal')
        cbar.set_label('PM2.5 (Œºg/m¬≥)', fontsize=12, fontweight='bold')
        cbar.ax.tick_params(labelsize=10)
        
        # Adicionar linhas de refer√™ncia na barra de cores
        cbar.ax.axvline(x=25, color='orange', linestyle='--', linewidth=2, alpha=0.8)
        cbar.ax.axvline(x=35, color='red', linestyle='--', linewidth=2, alpha=0.8)
        
        # Adicionar texto explicativo das linhas de refer√™ncia
        ax.text(0.02, 0.98, 'Limites de Refer√™ncia:\nüü† OMS: 25 Œºg/m¬≥\nüî¥ EPA: 35 Œºg/m¬≥', 
                transform=ax.transAxes, fontsize=10,
                verticalalignment='top', 
                bbox=dict(boxstyle='round,pad=0.5', facecolor='white', 
                         alpha=0.9, edgecolor='gray'))
    
    # Adicionar informa√ß√µes geogr√°ficas
    ax.text(0.98, 0.02, f'Estado: Mato Grosso do Sul\nMunic√≠pio Destacado: {city}\nCoordenadas: {lat_center:.2f}¬∞S, {abs(lon_center):.2f}¬∞W', 
            transform=ax.transAxes, fontsize=9,
            horizontalalignment='right', verticalalignment='bottom',
            bbox=dict(boxstyle='round,pad=0.5', facecolor='lightgray', 
                     alpha=0.9, edgecolor='gray'))
    
    plt.tight_layout()
    return fig

# Fun√ß√£o principal para an√°lise de PM2.5 e PM10 (modificada para usar o novo mapa)
def generate_pm_analysis():
    dataset = "cams-global-atmospheric-composition-forecasts"
    
    start_date_str = start_date.strftime('%Y-%m-%d')
    end_date_str = end_date.strftime('%Y-%m-%d')
    
    hours = []
    current_hour = start_hour
    while True:
        hours.append(f"{current_hour:02d}:00")
        if current_hour == end_hour:
            break
        current_hour = (current_hour + 3) % 24
        if current_hour == start_hour:
            break
    
    if not hours:
        hours = ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00']
    
    # √Årea de interesse cobrindo todo o MS para melhor visualiza√ß√£o
    ms_bounds = {
        'north': -17.0,
        'south': -24.5,
        'east': -50.5,
        'west': -58.5
    }
    
    # Requisi√ß√£o com PM2.5 e PM10 diretos do CAMS
    request = {
        'variable': [
            'particulate_matter_2.5um',  # PM2.5
            'particulate_matter_10um'    # PM10
        ],
        'date': f'{start_date_str}/{end_date_str}',
        'time': hours,
        'leadtime_hour': ['0', '24', '48', '72', '96', '120'],
        'type': ['forecast'],
        'format': 'netcdf',
        'area': [ms_bounds['north'], ms_bounds['west'], 
                ms_bounds['south'], ms_bounds['east']]
    }
    
    filename = f'PM25_PM10_MS_{city}_{start_date}_to_{end_date}.nc'
    
    try:
        with st.spinner('üì• Baixando dados de PM2.5 e PM10 para todo o MS...'):
            client.retrieve(dataset, request).download(filename)
        
        ds = xr.open_dataset(filename)
        
        # Identificar vari√°veis de PM2.5 e PM10
        variable_names = list(ds.data_vars)
        pm25_var = next((var for var in variable_names if 'pm2p5' in var.lower() or '2.5' in var), None)
        pm10_var = next((var for var in variable_names if 'pm10' in var.lower() or '10um' in var), None)
        
        if not pm25_var or not pm10_var:
            st.error("Vari√°veis de PM2.5 ou PM10 n√£o encontradas nos dados.")
            st.write("Vari√°veis dispon√≠veis:", variable_names)
            return None
        
        # Extrair s√©rie temporal para o munic√≠pio selecionado
        with st.spinner("Extraindo dados de PM para o munic√≠pio..."):
            df_timeseries = extract_pm_timeseries(ds, lat_center, lon_center, pm25_var, pm10_var)
        
        if df_timeseries.empty:
            st.error("N√£o foi poss√≠vel extrair s√©rie temporal para este local.")
            return None
        
        # Gerar previs√£o
        with st.spinner("Gerando previs√µes..."):
            df_forecast = predict_future_values(df_timeseries, days=5)
        
        # Criar mapa est√°tico focado no MS
        with st.spinner('üó∫Ô∏è Criando mapa de MS com destaque do munic√≠pio...'):
            ms_map_fig = create_ms_focused_map(
                ds, pm25_var, city, lat_center, lon_center, ms_shapes, frame_idx=0
            )
            
            # Salvar mapa est√°tico
            static_map_filename = f'MS_Map_{city}_{start_date}.png'
            ms_map_fig.savefig(static_map_filename, dpi=300, bbox_inches='tight')
            plt.close(ms_map_fig)
        
        # Criar anima√ß√£o para PM2.5 (opcional)
        da_pm25 = ds[pm25_var]
        
        # Converter unidades se necess√°rio
        if da_pm25.max().values < 1:  # Provavelmente em kg/m¬≥
            da_pm25 = da_pm25 * 1e9  # Converter para Œºg/m¬≥
        
        # Criar anima√ß√£o focada no MS
        time_dims = [dim for dim in da_pm25.dims if 'time' in dim or 'forecast' in dim]
        
        if 'forecast_reference_time' in da_pm25.dims:
            time_dim = 'forecast_reference_time'
            frames = len(da_pm25[time_dim])
        else:
            time_dim = time_dims[0]
            frames = len(da_pm25[time_dim])
        
        if frames >= 1:
            # Limitar n√∫mero de frames para anima√ß√£o
            actual_frames = min(frames, 12)
            
            def animate_frame(i):
                return create_ms_focused_map(
                    ds, pm25_var, city, lat_center, lon_center, ms_shapes, frame_idx=i
                )
            
            # Criar anima√ß√£o GIF
            gif_filename = f'PM25_MS_Animation_{city}_{start_date}_to_{end_date}.gif'
            
            with st.spinner('üíæ Criando anima√ß√£o...'):
                # Criar frames da anima√ß√£o
                animation_frames = []
                for i in range(actual_frames):
                    fig = animate_frame(i)
                    # Salvar frame tempor√°rio
                    temp_filename = f'temp_frame_{i}.png'
                    fig.savefig(temp_filename, dpi=150, bbox_inches='tight')
                    plt.close(fig)
                    animation_frames.append(temp_filename)
                
                # Criar GIF usando PIL
                from PIL import Image
                images = []
                for frame_file in animation_frames:
                    img = Image.open(frame_file)
                    images.append(img)
                    os.remove(frame_file)  # Limpar arquivo tempor√°rio
                
                # Salvar GIF
                images[0].save(gif_filename, save_all=True, append_images=images[1:], 
                              duration=animation_speed, loop=0)
        else:
            gif_filename = static_map_filename  # Usar mapa est√°tico se n√£o houver frames suficientes

        # Analisar todas as cidades usando os dados j√° baixados
        with st.spinner("üîç Analisando qualidade do ar em todos os munic√≠pios de MS..."):
            top_pollution_cities = analyze_all_cities(ds, pm25_var, pm10_var, cities)
        
        return {
            'static_map': static_map_filename,
            'animation': gif_filename,
            'timeseries': df_timeseries,
            'forecast': df_forecast,
            'dataset': ds,
            'pm25_var': pm25_var,
            'pm10_var': pm10_var,
            'top_pollution': top_pollution_cities
        }
    
    except Exception as e:
        st.error(f"‚ùå Erro ao processar os dados: {str(e)}")
        st.write("Detalhes da requisi√ß√£o:")
        st.write(request)
        return None

# Fun√ß√£o para calcular IQA (√çndice de Qualidade do Ar)
def calculate_aqi(pm25, pm10):
    """
    Calcula o √çndice de Qualidade do Ar baseado em PM2.5 e PM10.
    Usa os padr√µes da EPA adaptados para o Brasil.
    """
    # Breakpoints para PM2.5 (Œºg/m¬≥)
    pm25_breakpoints = [
        (0, 12, 0, 50),      # Boa
        (12.1, 35.4, 51, 100),  # Moderada
        (35.5, 55.4, 101, 150), # Insalubre para grupos sens√≠veis
        (55.5, 150.4, 151, 200), # Insalubre
        (150.5, 250.4, 201, 300), # Muito Insalubre
        (250.5, 500, 301, 500)  # Perigosa
    ]
    
    # Breakpoints para PM10 (Œºg/m¬≥)
    pm10_breakpoints = [
        (0, 54, 0, 50),
        (55, 154, 51, 100),
        (155, 254, 101, 150),
        (255, 354, 151, 200),
        (355, 424, 201, 300),
        (425, 600, 301, 500)
    ]
    
    def calc_sub_index(concentration, breakpoints):
        for bp_lo, bp_hi, i_lo, i_hi in breakpoints:
            if bp_lo <= concentration <= bp_hi:
                return ((i_hi - i_lo) / (bp_hi - bp_lo)) * (concentration - bp_lo) + i_lo
        return 500  # M√°ximo se exceder todos os breakpoints
    
    aqi_pm25 = calc_sub_index(pm25, pm25_breakpoints)
    aqi_pm10 = calc_sub_index(pm10, pm10_breakpoints)
    
    # IQA √© o maior dos dois
    aqi = max(aqi_pm25, aqi_pm10)
    
    # Categoria
    if aqi <= 50:
        category = "Boa"
        color = "green"
    elif aqi <= 100:
        category = "Moderada"
        color = "yellow"
    elif aqi <= 150:
        category = "Insalubre para Grupos Sens√≠veis"
        color = "orange"
    elif aqi <= 200:
        category = "Insalubre"
        color = "red"
    elif aqi <= 300:
        category = "Muito Insalubre"
        color = "purple"
    else:
        category = "Perigosa"
        color = "maroon"
    
    return aqi, category, color

# Fun√ß√£o para extrair s√©rie temporal de PM2.5 e PM10
def extract_pm_timeseries(ds, lat, lon, pm25_var, pm10_var):
    """Extrai s√©rie temporal de PM2.5 e PM10 de um ponto espec√≠fico do dataset."""
    lat_idx = np.abs(ds.latitude.values - lat).argmin()
    lon_idx = np.abs(ds.longitude.values - lon).argmin()
    
    times = []
    pm25_values = []
    pm10_values = []
    
    # Identificar dimens√µes temporais
    time_dims = [dim for dim in ds.dims if 'time' in dim or 'forecast' in dim]
    
    if 'forecast_reference_time' in ds.dims and 'forecast_period' in ds.dims:
        for t_idx, ref_time in enumerate(ds.forecast_reference_time.values):
            for p_idx, period in enumerate(ds.forecast_period.values):
                try:
                    pm25_val = float(ds[pm25_var].isel(
                        forecast_reference_time=t_idx, 
                        forecast_period=p_idx,
                        latitude=lat_idx, 
                        longitude=lon_idx
                    ).values)
                    
                    pm10_val = float(ds[pm10_var].isel(
                        forecast_reference_time=t_idx, 
                        forecast_period=p_idx,
                        latitude=lat_idx, 
                        longitude=lon_idx
                    ).values)
                    
                    # Converter de kg/m¬≥ para Œºg/m¬≥ se necess√°rio
                    if pm25_val < 1:  # Provavelmente em kg/m¬≥
                        pm25_val *= 1e9  # kg/m¬≥ para Œºg/m¬≥
                        pm10_val *= 1e9
                    
                    actual_time = pd.to_datetime(ref_time) + pd.to_timedelta(period, unit='h')
                    times.append(actual_time)
                    pm25_values.append(pm25_val)
                    pm10_values.append(pm10_val)
                except:
                    continue
    elif any(dim in ds.dims for dim in ['time', 'forecast_reference_time']):
        time_dim = next(dim for dim in ds.dims if dim in ['time', 'forecast_reference_time'])
        for t_idx in range(len(ds[time_dim])):
            try:
                pm25_val = float(ds[pm25_var].isel({
                    time_dim: t_idx,
                    'latitude': lat_idx,
                    'longitude': lon_idx
                }).values)
                
                pm10_val = float(ds[pm10_var].isel({
                    time_dim: t_idx,
                    'latitude': lat_idx,
                    'longitude': lon_idx
                }).values)
                
                # Converter unidades se necess√°rio
                if pm25_val < 1:
                    pm25_val *= 1e9
                    pm10_val *= 1e9
                
                times.append(pd.to_datetime(ds[time_dim].isel({time_dim: t_idx}).values))
                pm25_values.append(pm25_val)
                pm10_values.append(pm10_val)
            except:
                continue
    
    if times and pm25_values and pm10_values:
        df = pd.DataFrame({
            'time': times,
            'pm25': pm25_values,
            'pm10': pm10_values
        })
        df = df.sort_values('time').reset_index(drop=True)
        
        # Calcular IQA
        aqi_values = df.apply(lambda row: calculate_aqi(row['pm25'], row['pm10']), axis=1)
        df['aqi'] = aqi_values.apply(lambda x: x[0])
        df['aqi_category'] = aqi_values.apply(lambda x: x[1])
        df['aqi_color'] = aqi_values.apply(lambda x: x[2])
        
        return df
    else:
        return pd.DataFrame(columns=['time', 'pm25', 'pm10', 'aqi', 'aqi_category'])

# Fun√ß√£o para prever valores futuros
def predict_future_values(df, days=5):
    """Gera previs√£o para PM2.5 e PM10."""
    if len(df) < 3:
        return pd.DataFrame(columns=['time', 'pm25', 'pm10', 'aqi', 'type'])
    
    df_hist = df.copy()
    df_hist['time_numeric'] = (df_hist['time'] - df_hist['time'].min()).dt.total_seconds()
    
    # Modelos separados para PM2.5 e PM10
    X = df_hist['time_numeric'].values.reshape(-1, 1)
    
    model_pm25 = LinearRegression()
    model_pm25.fit(X, df_hist['pm25'].values)
    
    model_pm10 = LinearRegression()
    model_pm10.fit(X, df_hist['pm10'].values)
    
    # Gerar pontos futuros
    last_time = df_hist['time'].max()
    future_times = [last_time + timedelta(hours=i*6) for i in range(1, days*4+1)]
    future_time_numeric = [(t - df_hist['time'].min()).total_seconds() for t in future_times]
    
    # Prever valores
    future_pm25 = model_pm25.predict(np.array(future_time_numeric).reshape(-1, 1))
    future_pm10 = model_pm10.predict(np.array(future_time_numeric).reshape(-1, 1))
    
    # Limitar valores
    future_pm25 = np.maximum(future_pm25, 0)
    future_pm10 = np.maximum(future_pm10, 0)
    
    # Calcular IQA para previs√µes
    future_aqi = []
    future_categories = []
    future_colors = []
    
    for pm25, pm10 in zip(future_pm25, future_pm10):
        aqi, category, color = calculate_aqi(pm25, pm10)
        future_aqi.append(aqi)
        future_categories.append(category)
        future_colors.append(color)
    
    # Criar DataFrame com previs√£o
    df_pred = pd.DataFrame({
        'time': future_times,
        'pm25': future_pm25,
        'pm10': future_pm10,
        'aqi': future_aqi,
        'aqi_category': future_categories,
        'aqi_color': future_colors,
        'type': 'forecast'
    })
    
    # Adicionar indicador aos dados hist√≥ricos
    df_hist['type'] = 'historical'
    
    # Combinar hist√≥rico e previs√£o
    result = pd.concat([df_hist[['time', 'pm25', 'pm10', 'aqi', 'aqi_category', 'aqi_color', 'type']], df_pred], ignore_index=True)
    return result

# Fun√ß√£o para analisar todas as cidades
def analyze_all_cities(ds, pm25_var, pm10_var, cities_dict):
    """Analisa os valores de PM2.5 e PM10 para todas as cidades."""
    cities_results = []
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for i, (city_name, coords) in enumerate(cities_dict.items()):
        progress = (i + 1) / len(cities_dict)
        progress_bar.progress(progress)
        status_text.text(f"Analisando {city_name}... ({i+1}/{len(cities_dict)})")
        
        lat, lon = coords
        
        df_timeseries = extract_pm_timeseries(ds, lat, lon, pm25_var, pm10_var)
        
        if not df_timeseries.empty:
            df_forecast = predict_future_values(df_timeseries, days=5)
            
            forecast_only = df_forecast[df_forecast['type'] == 'forecast']
            
            if not forecast_only.empty:
                max_pm25 = forecast_only['pm25'].max()
                max_pm10 = forecast_only['pm10'].max()
                max_aqi = forecast_only['aqi'].max()
                
                max_day_idx = forecast_only['aqi'].idxmax()
                max_day = forecast_only.loc[max_day_idx, 'time']
                max_category = forecast_only.loc[max_day_idx, 'aqi_category']
                
                cities_results.append({
                    'cidade': city_name,
                    'pm25_max': max_pm25,
                    'pm10_max': max_pm10,
                    'aqi_max': max_aqi,
                    'data_max': max_day,
                    'categoria': max_category
                })
    
    progress_bar.empty()
    status_text.empty()
    
    if cities_results:
        df_results = pd.DataFrame(cities_results)
        df_results = df_results.sort_values('aqi_max', ascending=False).reset_index(drop=True)
        
        df_results['pm25_max'] = df_results['pm25_max'].round(1)
        df_results['pm10_max'] = df_results['pm10_max'].round(1)
        df_results['aqi_max'] = df_results['aqi_max'].round(0)
        df_results['data_max'] = df_results['data_max'].dt.strftime('%d/%m/%Y %H:%M')
        
        return df_results
    else:
        return pd.DataFrame(columns=['cidade', 'pm25_max', 'pm10_max', 'aqi_max', 'data_max', 'categoria'])

# Carregar shapefiles dos munic√≠pios
with st.spinner("Carregando shapes dos munic√≠pios..."):
    ms_shapes = load_ms_municipalities()

# Sidebar para configura√ß√µes
st.sidebar.header("‚öôÔ∏è Configura√ß√µes")

# Sele√ß√£o de cidade
available_cities = sorted(list(set(ms_shapes['NM_MUN'].tolist()).intersection(set(cities.keys()))))
if not available_cities:
    available_cities = list(cities.keys())

city = st.sidebar.selectbox("Selecione o munic√≠pio para an√°lise detalhada", available_cities)
lat_center, lon_center = cities[city]

# Configura√ß√µes de data e hora
st.sidebar.subheader("Per√≠odo de An√°lise")
start_date = st.sidebar.date_input("Data de In√≠cio", datetime.today() - timedelta(days=2))
end_date = st.sidebar.date_input("Data Final", datetime.today() + timedelta(days=5))

all_hours = list(range(0, 24, 3))
start_hour = st.sidebar.selectbox("Hor√°rio Inicial", all_hours, format_func=lambda x: f"{x:02d}:00")
end_hour = st.sidebar.selectbox("Hor√°rio Final", all_hours, index=len(all_hours)-1, format_func=lambda x: f"{x:02d}:00")

# Op√ß√µes avan√ßadas
st.sidebar.subheader("Op√ß√µes Avan√ßadas")
with st.sidebar.expander("Configura√ß√µes da Visualiza√ß√£o"):
    animation_speed = st.slider("Velocidade da Anima√ß√£o (ms)", 200, 1000, 500)
    show_pm10_animation = st.checkbox("Gerar anima√ß√£o tamb√©m para PM10", value=False)

# Informa√ß√µes sobre dados diretos
st.sidebar.info("üìä **Dados Diretos CAMS**\nEste sistema utiliza concentra√ß√µes de PM2.5 e PM10 medidas diretamente pelos sensores do CAMS, sem convers√£o de AOD.")

# T√≠tulos e introdu√ß√£o
st.title("üåç Monitoramento PM2.5 e PM10 - Mato Grosso do Sul")
st.markdown("""
### Sistema Integrado de Monitoramento da Qualidade do Ar

Este aplicativo monitora diretamente as concentra√ß√µes de Material Particulado (PM2.5 e PM10) 
para todos os munic√≠pios de Mato Grosso do Sul usando dados diretos do CAMS.

**Caracter√≠sticas desta vers√£o:**
- üìä Dados diretos de PM2.5 e PM10 do CAMS (sem convers√£o de AOD)
- üéØ Visualiza√ß√£o focada no estado de Mato Grosso do Sul
- üó∫Ô∏è Contorno destacado do munic√≠pio selecionado
- üìà √çndice de Qualidade do Ar (IQA) calculado
- üîÆ Previs√µes para os pr√≥ximos 5 dias
""")

# Bot√£o principal
st.markdown("### üöÄ Iniciar An√°lise Completa")
st.markdown(f"Clique no bot√£o abaixo para gerar an√°lise de PM2.5 e PM10 centralizada em **{city}**.")

if st.button("üéØ Gerar An√°lise de Qualidade do Ar", type="primary", use_container_width=True):
    try:
        results = generate_pm_analysis()
        
        if results:
            # Criar abas
            tab1, tab2, tab3, tab4 = st.tabs([
                "üìä An√°lise do Munic√≠pio", 
                "‚ö†Ô∏è Alerta de Qualidade do Ar", 
                f"üó∫Ô∏è Mapa de MS - {city}",
                "üìà An√°lise Detalhada PM"
            ])
            
            # Aba do Mapa
            with tab3:
                st.subheader(f"üó∫Ô∏è Mapa de Mato Grosso do Sul - {city}")
                
                # Mostrar mapa est√°tico primeiro
                if 'static_map' in results:
                    st.image(results['static_map'], 
                            caption=f"Concentra√ß√£o de PM2.5 em Mato Grosso do Sul com destaque para {city}")
                
                # Mostrar anima√ß√£o se dispon√≠vel
                if 'animation' in results and results['animation'] != results.get('static_map'):
                    st.subheader("üé¨ Evolu√ß√£o Temporal")
                    st.image(results['animation'], 
                            caption=f"Evolu√ß√£o temporal do PM2.5 em MS ({start_date} a {end_date})")
                
                # Bot√µes de download
                col1, col2 = st.columns(2)
                with col1:
                    if 'static_map' in results:
                        with open(results['static_map'], "rb") as file:
                            st.download_button(
                                label="‚¨áÔ∏è Baixar Mapa (PNG)",
                                data=file,
                                file_name=f"Mapa_MS_{city}_{start_date}.png",
                                mime="image/png"
                            )
                
                with col2:
                    if 'animation' in results and results['animation'] != results.get('static_map'):
                        with open(results['animation'], "rb") as file:
                            st.download_button(
                                label="‚¨áÔ∏è Baixar Anima√ß√£o (GIF)",
                                data=file,
                                file_name=f"Animacao_MS_{city}_{start_date}_to_{end_date}.gif",
                                mime="image/gif"
                            )
                
                # Informa√ß√µes sobre o mapa
                st.info(f"""
                **Como interpretar o mapa de Mato Grosso do Sul:**
                
                üó∫Ô∏è **Visualiza√ß√£o:**
                - Mapa focado no estado de Mato Grosso do Sul
                - Contorno vermelho destacando o munic√≠pio de **{city}**
                - Ponto vermelho marcando a localiza√ß√£o exata
                - Contornos de todos os munic√≠pios em cinza
                
                üé® **Escala de Cores PM2.5:**
                - üü° Amarelo: Concentra√ß√µes baixas (0-25 Œºg/m¬≥)
                - üü† Laranja: Concentra√ß√µes moderadas (25-35 Œºg/m¬≥)
                - üî¥ Vermelho: Concentra√ß√µes altas (>35 Œºg/m¬≥)
                
                üìè **Linhas de Refer√™ncia:**
                - üü† Linha laranja: Limite OMS (25 Œºg/m¬≥)
                - üî¥ Linha vermelha: Limite EPA (35 Œºg/m¬≥)
                
                üìä **Dados:** CAMS - Copernicus Atmosphere Monitoring Service
                """)
            
            # Aba de An√°lise do Munic√≠pio
            with tab1:
                st.subheader(f"üìä An√°lise Detalhada - {city}")
                
                col1, col2 = st.columns([3, 2])
                
                with col1:
                    df_combined = results['forecast']
                    
                    # Criar subplots para PM2.5 e PM10
                    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 10), sharex=True)
                    
                    # Separar dados hist√≥ricos e previs√£o
                    hist_data = df_combined[df_combined['type'] == 'historical']
                    forecast_data = df_combined[df_combined['type'] == 'forecast']
                    
                    # Gr√°fico PM2.5
                    ax1.plot(hist_data['time'], hist_data['pm25'], 
                           'o-', color='darkblue', label='PM2.5 Observado', markersize=6)
                    ax1.plot(forecast_data['time'], forecast_data['pm25'], 
                           'x--', color='red', label='PM2.5 Previsto', markersize=6)
                    ax1.axhline(y=25, color='orange', linestyle='--', alpha=0.7, label='Limite OMS (25 Œºg/m¬≥)')
                    ax1.axhline(y=35, color='red', linestyle='--', alpha=0.7, label='Limite EPA (35 Œºg/m¬≥)')
                    ax1.set_ylabel('PM2.5 (Œºg/m¬≥)', fontsize=12)
                    ax1.legend()
                    ax1.grid(True, alpha=0.3)
                    ax1.set_title('Material Particulado PM2.5', fontsize=14)
                    
                    # Gr√°fico PM10
                    ax2.plot(hist_data['time'], hist_data['pm10'], 
                           'o-', color='brown', label='PM10 Observado', markersize=6)
                    ax2.plot(forecast_data['time'], forecast_data['pm10'], 
                           'x--', color='darkred', label='PM10 Previsto', markersize=6)
                    ax2.axhline(y=50, color='orange', linestyle='--', alpha=0.7, label='Limite OMS (50 Œºg/m¬≥)')
                    ax2.axhline(y=150, color='red', linestyle='--', alpha=0.7, label='Limite EPA (150 Œºg/m¬≥)')
                    ax2.set_ylabel('PM10 (Œºg/m¬≥)', fontsize=12)
                    ax2.legend()
                    ax2.grid(True, alpha=0.3)
                    ax2.set_title('Material Particulado PM10', fontsize=14)
                    
                    # Gr√°fico IQA
                    ax3.plot(hist_data['time'], hist_data['aqi'], 
                           'o-', color='purple', label='IQA Observado', markersize=6)
                    ax3.plot(forecast_data['time'], forecast_data['aqi'], 
                           'x--', color='magenta', label='IQA Previsto', markersize=6)
                    
                    # Zonas de qualidade do ar
                    ax3.axhspan(0, 50, alpha=0.2, color='green', label='Boa')
                    ax3.axhspan(51, 100, alpha=0.2, color='yellow', label='Moderada')
                    ax3.axhspan(101, 150, alpha=0.2, color='orange', label='Insalubre p/ Sens√≠veis')
                    ax3.axhspan(151, 200, alpha=0.2, color='red', label='Insalubre')
                    
                    ax3.set_ylabel('IQA', fontsize=12)
                    ax3.set_xlabel('Data/Hora', fontsize=12)
                    ax3.legend()
                    ax3.grid(True, alpha=0.3)
                    ax3.set_title('√çndice de Qualidade do Ar', fontsize=14)
                    
                    # Formatar datas
                    ax3.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m %H:%M'))
                    plt.xticks(rotation=45)
                    
                    plt.tight_layout()
                    st.pyplot(fig)
                
                with col2:
                    st.subheader("üìà Estat√≠sticas Atuais")
                    
                    if not hist_data.empty:
                        curr_pm25 = hist_data['pm25'].iloc[-1]
                        curr_pm10 = hist_data['pm10'].iloc[-1]
                        curr_aqi = hist_data['aqi'].iloc[-1]
                        curr_category = hist_data['aqi_category'].iloc[-1]
                        curr_color = hist_data['aqi_color'].iloc[-1]
                        
                        # M√©tricas
                        col_a, col_b = st.columns(2)
                        col_a.metric("PM2.5 Atual", f"{curr_pm25:.1f} Œºg/m¬≥")
                        col_b.metric("PM10 Atual", f"{curr_pm10:.1f} Œºg/m¬≥")
                        
                        st.metric("IQA Atual", f"{curr_aqi:.0f}")
                        
                        # Categoria de qualidade
                        st.markdown(f"""
                        <div style="padding:15px; border-radius:10px; background-color:{curr_color}; 
                        color:white; text-align:center; margin:10px 0;">
                        <h3 style="margin:0;">Qualidade do Ar</h3>
                        <h2 style="margin:5px 0;">{curr_category}</h2>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Recomenda√ß√µes
                        st.subheader("üí° Recomenda√ß√µes")
                        if curr_aqi <= 50:
                            st.success("‚úÖ Condi√ß√µes ideais para atividades ao ar livre")
                        elif curr_aqi <= 100:
                            st.info("‚ÑπÔ∏è Pessoas sens√≠veis devem considerar limitar esfor√ßos prolongados")
                        elif curr_aqi <= 150:
                            st.warning("‚ö†Ô∏è Grupos sens√≠veis devem evitar esfor√ßos ao ar livre")
                        elif curr_aqi <= 200:
                            st.error("üö´ Evite esfor√ßos prolongados ao ar livre")
                        else:
                            st.error("‚ò†Ô∏è Evite todas as atividades ao ar livre")
                        
                        # Compara√ß√£o com limites
                        st.subheader("üìè Compara√ß√£o com Padr√µes")
                        
                        pm25_who_limit = 25
                        pm10_who_limit = 50
                        
                        st.progress(min(curr_pm25 / pm25_who_limit, 1.0))
                        st.caption(f"PM2.5: {curr_pm25:.1f}/{pm25_who_limit} Œºg/m¬≥ (Limite OMS 24h)")
                        
                        st.progress(min(curr_pm10 / pm10_who_limit, 1.0))
                        st.caption(f"PM10: {curr_pm10:.1f}/{pm10_who_limit} Œºg/m¬≥ (Limite OMS 24h)")
                        
                        # Previs√£o resumida dos pr√≥ximos 5 dias
                        if not forecast_data.empty:
                            st.subheader("üîÆ Pr√≥ximos 5 dias")
                            
                            forecast_data['date'] = forecast_data['time'].dt.date
                            daily_forecast = forecast_data.groupby('date').agg({
                                'aqi': 'max',
                                'aqi_category': lambda x: x.iloc[x.values.argmax()],
                                'pm25': 'mean',
                                'pm10': 'mean'
                            }).reset_index()
                            
                            for _, row in daily_forecast.iterrows():
                                aqi_color = 'green' if row['aqi'] <= 50 else 'yellow' if row['aqi'] <= 100 else 'orange' if row['aqi'] <= 150 else 'red'
                                st.markdown(f"""
                                <div style="padding:5px; border-radius:5px; background-color:{aqi_color}; 
                                color:{'white' if aqi_color != 'yellow' else 'black'}; margin:2px 0;">
                                <b>{row['date'].strftime('%d/%m')}:</b> IQA {row['aqi']:.0f} - {row['aqi_category']}
                                </div>
                                """, unsafe_allow_html=True)
                    
                    # Exportar dados
                    st.subheader("üíæ Exportar Dados")
                    csv = df_combined.to_csv(index=False).encode('utf-8')
                    st.download_button(
                        label="‚¨áÔ∏è Baixar Dados Completos (CSV)",
                        data=csv,
                        file_name=f"PM_data_{city}_{start_date}_to_{end_date}.csv",
                        mime="text/csv",
                    )
            
            # Restante das abas permanece igual...
            # [Continua√ß√£o do c√≥digo das outras abas]
            
    except Exception as e:
        st.error(f"‚ùå Erro durante a an√°lise: {str(e)}")
        import traceback
        st.code(traceback.format_exc())

# Rodap√© informativo
st.markdown("---")
st.markdown("""
### ‚ÑπÔ∏è Informa√ß√µes Importantes

**Sobre os Dados Diretos:**
- As concentra√ß√µes de PM2.5/PM10 s√£o obtidas diretamente do CAMS, sem convers√µes
- Dados calibrados e validados continuamente com esta√ß√µes de monitoramento
- Precis√£o superior aos m√©todos de convers√£o de AOD

**Visualiza√ß√£o Aprimorada:**
- Mapa focado especificamente no estado de Mato Grosso do Sul
- Contorno destacado em vermelho para o munic√≠pio selecionado
- Visualiza√ß√£o de todos os munic√≠pios com contornos em cinza
- Escala de cores otimizada para concentra√ß√µes de PM2.5

**Dados Fornecidos por:**
- CAMS (Copernicus Atmosphere Monitoring Service) - Uni√£o Europeia
- Shapefiles: IBGE 2022
- Processamento: Sistema desenvolvido para monitoramento ambiental de MS
""")

# Informa√ß√µes de contato/suporte
with st.expander("üìû Suporte e Informa√ß√µes T√©cnicas"):
    st.markdown("""
    ### Suporte T√©cnico
    
    **Par√¢metros do Sistema:**
    - Resolu√ß√£o espacial: ~0.4¬∞ x 0.4¬∞ (‚âà 44 km)
    - Resolu√ß√£o temporal: 3 horas
    - Previs√£o: At√© 5 dias
    - Vari√°veis principais: PM2.5 e PM10 diretos
    
    **Melhorias na Visualiza√ß√£o:**
    - Mapa focado no estado de MS
    - Contorno destacado do munic√≠pio selecionado
    - Shapefiles oficiais do IBGE 2022
    - Escala de cores otimizada para PM2.5
    
    **Para Melhor Precis√£o:**
    - Use dados de m√∫ltiplos pontos temporais
    - Considere condi√ß√µes meteorol√≥gicas locais
    - Valide com medi√ß√µes locais quando dispon√≠vel
    - Monitore tend√™ncias de longo prazo
    """))
