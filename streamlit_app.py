import cdsapi
import xarray as xr
import numpy as np
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
from matplotlib import animation
import streamlit as st
from datetime import datetime, timedelta
import os
import pandas as pd
import geopandas as gpd
import io
import requests
from matplotlib.patches import PathPatch
from matplotlib.path import Path
from sklearn.linear_model import LinearRegression
import matplotlib.dates as mdates
import seaborn as sns
from matplotlib.gridspec import GridSpec

# Configura√ß√£o inicial da p√°gina
st.set_page_config(layout="wide", page_title="Monitoramento de Qualidade do Ar - MS")

# ‚úÖ Carregar autentica√ß√£o a partir do secrets.toml
try:
    ads_url = st.secrets["ads"]["url"]
    ads_key = st.secrets["ads"]["key"]
    client = cdsapi.Client(url=ads_url, key=ads_key)
except Exception as e:
    st.error("‚ùå Erro ao carregar as credenciais do CDS API. Verifique seu secrets.toml.")
    st.stop()

# üåé Lista expandida de cidades do MS
cities = {
    "Campo Grande": [-20.4697, -54.6201],
    "Dourados": [-22.2231, -54.812],
    "Tr√™s Lagoas": [-20.7849, -51.7005],
    "Corumb√°": [-19.0082, -57.651],
    "Ponta Por√£": [-22.5334, -55.7271],
    "Bonito": [-21.1261, -56.4836],
    "Nova Andradina": [-22.2332, -53.3437],
    "Aquidauana": [-20.4697, -55.7868],
    "Navira√≠": [-23.0616, -54.1990],
    "Coxim": [-18.5065, -54.7610],
    "Parana√≠ba": [-19.6746, -51.1911],
    "Maracaju": [-21.6136, -55.1678],
    "Miranda": [-20.2410, -56.3752],
    "Chapad√£o do Sul": [-18.7884, -52.6264],
    "Costa Rica": [-18.5451, -53.1298],
    "Jardim": [-21.4799, -56.1489],
    "Rio Brilhante": [-21.8033, -54.5425],
    "Sidrol√¢ndia": [-20.9275, -54.9592],
    "Amambai": [-23.1058, -55.2253],
    "Porto Murtinho": [-21.6989, -57.8828]
}

# Fun√ß√£o para baixar shapefile dos munic√≠pios de MS (simplificado)
@st.cache_data
def load_ms_municipalities():
    try:
        # URL para um shapefile de munic√≠pios do MS
        url = "https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/" + \
              "municipio_2022/UFs/MS/MS_Municipios_2022.zip"
        
        # Tentativa de carregar os dados
        try:
            gdf = gpd.read_file(url)
            return gdf
        except:
            # Fallback: criar geodataframe simplificado com cidades
            data = {
                'NM_MUN': list(cities.keys()),
                'geometry': [
                    gpd.points_from_xy([lon], [lat])[0].buffer(0.2) 
                    for city, (lat, lon) in cities.items()
                ]
            }
            gdf = gpd.GeoDataFrame(data, crs="EPSG:4326")
            return gdf
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel carregar os shapes dos munic√≠pios: {str(e)}")
        # Retornar DataFrame vazio com estrutura esperada
        return gpd.GeoDataFrame(columns=['NM_MUN', 'geometry'], crs="EPSG:4326")

# Dicion√°rio de refer√™ncia para par√¢metros de qualidade do ar
air_quality_params = {
    "total_aerosol_optical_depth_550nm": {
        "nome": "AOD 550nm",
        "unidade": "sem unidade",
        "limites": {
            "bom": 0.1,
            "moderado": 0.2,
            "insalubre": 0.5,
            "perigoso": 1.0
        },
        "cores": ["green", "yellow", "orange", "red", "darkred"]
    },
    "nitrogen_dioxide_column_number_density": {
        "nome": "Di√≥xido de Nitrog√™nio (NO‚ÇÇ)",
        "unidade": "mol/m¬≤",
        "limites": {
            "bom": 1e-5,
            "moderado": 5e-5,
            "insalubre": 1e-4,
            "perigoso": 2e-4
        },
        "cores": ["green", "yellow", "orange", "red", "darkred"]
    },
    "sulphur_dioxide_column_number_density": {
        "nome": "Di√≥xido de Enxofre (SO‚ÇÇ)",
        "unidade": "mol/m¬≤",
        "limites": {
            "bom": 5e-6,
            "moderado": 2e-5,
            "insalubre": 5e-5,
            "perigoso": 1e-4
        },
        "cores": ["green", "yellow", "orange", "red", "darkred"]
    },
    "carbon_monoxide_column_number_density": {
        "nome": "Mon√≥xido de Carbono (CO)",
        "unidade": "mol/m¬≤",
        "limites": {
            "bom": 0.02,
            "moderado": 0.035,
            "insalubre": 0.05,
            "perigoso": 0.1
        },
        "cores": ["green", "yellow", "orange", "red", "darkred"]
    },
    "ozone_column_number_density": {
        "nome": "Oz√¥nio (O‚ÇÉ)",
        "unidade": "mol/m¬≤",
        "limites": {
            "bom": 0.006,
            "moderado": 0.01,
            "insalubre": 0.015,
            "perigoso": 0.02
        },
        "cores": ["green", "yellow", "orange", "red", "darkred"]
    },
    "nitric_oxide_column_number_density": {
        "nome": "√ìxido N√≠trico (NO)",
        "unidade": "mol/m¬≤",
        "limites": {
            "bom": 1e-6,
            "moderado": 5e-6,
            "insalubre": 1e-5,
            "perigoso": 2e-5
        },
        "cores": ["green", "yellow", "orange", "red", "darkred"]
    }
}

# T√≠tulos e introdu√ß√£o
st.title("üåÄ Monitoramento e Previs√£o de Qualidade do Ar - Mato Grosso do Sul")
st.markdown("""
Este aplicativo permite visualizar e analisar dados de qualidade do ar para munic√≠pios 
de Mato Grosso do Sul. Os dados s√£o obtidos em tempo real do CAMS (Copernicus Atmosphere 
Monitoring Service).

Indicadores dispon√≠veis:
- **AOD 550nm**: Profundidade √ìptica de Aeross√≥is
- **NO‚ÇÇ**: Di√≥xido de Nitrog√™nio
- **SO‚ÇÇ**: Di√≥xido de Enxofre
- **CO**: Mon√≥xido de Carbono
- **O‚ÇÉ**: Oz√¥nio
- **NO**: √ìxido N√≠trico
""")

# Carregar shapefiles dos munic√≠pios do MS
with st.spinner("Carregando shapes dos munic√≠pios..."):
    ms_shapes = load_ms_municipalities()

# Sidebar para configura√ß√µes
st.sidebar.header("‚öôÔ∏è Configura√ß√µes")

# Sele√ß√£o de cidade
available_cities = sorted(list(cities.keys()))
city = st.sidebar.selectbox("Selecione o munic√≠pio", available_cities)
lat_center, lon_center = cities[city]

# Sele√ß√£o de par√¢metros
param_options = list(air_quality_params.keys())
param_names = [air_quality_params[p]["nome"] for p in param_options]
param_dict = dict(zip(param_names, param_options))

selected_params = st.sidebar.multiselect(
    "Selecione os par√¢metros",
    param_names,
    default=[param_names[0]]
)

# Converte nomes de par√¢metros em chaves para API
selected_param_keys = [param_dict[param] for param in selected_params]

# Configura√ß√µes de data e hora
st.sidebar.subheader("Per√≠odo de An√°lise")
start_date = st.sidebar.date_input("Data de In√≠cio", datetime.today() - timedelta(days=2))
end_date = st.sidebar.date_input("Data Final", datetime.today() + timedelta(days=3))

all_hours = list(range(0, 24, 3))
start_hour = st.sidebar.selectbox("Hor√°rio Inicial", all_hours, format_func=lambda x: f"{x:02d}:00")
end_hour = st.sidebar.selectbox("Hor√°rio Final", all_hours, index=len(all_hours)-1, format_func=lambda x: f"{x:02d}:00")

# Op√ß√µes avan√ßadas
st.sidebar.subheader("Op√ß√µes Avan√ßadas")
with st.sidebar.expander("Configura√ß√µes da Visualiza√ß√£o"):
    map_width = st.slider("Largura do Mapa (graus)", 5, 20, 10)
    animation_speed = st.slider("Velocidade da Anima√ß√£o (ms)", 200, 1000, 500)
    colormap = st.selectbox("Paleta de Cores", 
                           ["YlOrRd", "viridis", "plasma", "inferno", "magma", "cividis"])

# Fun√ß√£o para extrair valores para um ponto espec√≠fico
def extract_point_timeseries(ds, lat, lon, var_name):
    """Extrai s√©rie temporal de um ponto espec√≠fico do dataset."""
    lat_idx = np.abs(ds.latitude.values - lat).argmin()
    lon_idx = np.abs(ds.longitude.values - lon).argmin()
    
    # Identificar as dimens√µes temporais
    time_dims = [dim for dim in ds[var_name].dims if 'time' in dim or 'forecast' in dim]
    
    # Criar dataframe para armazenar valores por tempo
    times = []
    values = []
    
    # Se tivermos forecast_reference_time e forecast_period
    if 'forecast_reference_time' in ds[var_name].dims and 'forecast_period' in ds[var_name].dims:
        for t_idx, ref_time in enumerate(ds.forecast_reference_time.values):
            for p_idx, period in enumerate(ds.forecast_period.values):
                try:
                    value = float(ds[var_name].isel(
                        forecast_reference_time=t_idx, 
                        forecast_period=p_idx,
                        latitude=lat_idx, 
                        longitude=lon_idx
                    ).values)
                    
                    # Calcular o tempo real somando o per√≠odo √† refer√™ncia
                    actual_time = pd.to_datetime(ref_time) + pd.to_timedelta(period, unit='h')
                    times.append(actual_time)
                    values.append(value)
                except:
                    continue
    # Caso tenha apenas uma dimens√£o de tempo
    elif any(dim in ds[var_name].dims for dim in ['time', 'forecast_reference_time']):
        time_dim = next(dim for dim in ds[var_name].dims if dim in ['time', 'forecast_reference_time'])
        for t_idx in range(len(ds[time_dim])):
            try:
                value = float(ds[var_name].isel({
                    time_dim: t_idx,
                    'latitude': lat_idx,
                    'longitude': lon_idx
                }).values)
                times.append(pd.to_datetime(ds[time_dim].isel({time_dim: t_idx}).values))
                values.append(value)
            except:
                continue
    
    # Criar DataFrame
    if times and values:
        df = pd.DataFrame({'time': times, 'value': values})
        df = df.sort_values('time').reset_index(drop=True)
        return df
    else:
        return pd.DataFrame(columns=['time', 'value'])

# Fun√ß√£o para prever valores futuros
def predict_future_values(df, days=3):
    """Gera uma previs√£o simples baseada nos dados hist√≥ricos."""
    if len(df) < 3:  # Precisa de pelo menos 3 pontos para uma previs√£o m√≠nima
        return pd.DataFrame(columns=['time', 'value', 'type'])
    
    # Preparar dados para regress√£o
    df_hist = df.copy()
    df_hist['time_numeric'] = (df_hist['time'] - df_hist['time'].min()).dt.total_seconds()
    
    # Modelo de regress√£o linear simples
    X = df_hist['time_numeric'].values.reshape(-1, 1)
    y = df_hist['value'].values
    model = LinearRegression()
    model.fit(X, y)
    
    # Gerar pontos futuros
    last_time = df_hist['time'].max()
    future_times = [last_time + timedelta(hours=i*6) for i in range(1, days*4+1)]  # 4 pontos por dia (6h)
    future_time_numeric = [(t - df_hist['time'].min()).total_seconds() for t in future_times]
    
    # Prever valores
    future_values = model.predict(np.array(future_time_numeric).reshape(-1, 1))
    
    # Limitar valores previstos (n√£o pode ser negativo)
    future_values = np.maximum(future_values, 0)
    
    # Criar DataFrame com previs√£o
    df_pred = pd.DataFrame({
        'time': future_times,
        'value': future_values,
        'type': 'forecast'
    })
    
    # Adicionar indicador aos dados hist√≥ricos
    df_hist['type'] = 'historical'
    
    # Combinar hist√≥rico e previs√£o
    result = pd.concat([df_hist[['time', 'value', 'type']], df_pred], ignore_index=True)
    return result

# Fun√ß√£o para calcular categoria de qualidade do ar
def get_air_quality_category(value, param_key):
    """Retorna categoria e cor para o valor de um par√¢metro."""
    if param_key not in air_quality_params:
        return "Desconhecido", "gray"
    
    limits = air_quality_params[param_key]["limites"]
    colors = air_quality_params[param_key]["cores"]
    
    if value < limits["bom"]:
        return "Bom", colors[0]
    elif value < limits["moderado"]:
        return "Moderado", colors[1]
    elif value < limits["insalubre"]:
        return "Insalubre para grupos sens√≠veis", colors[2]
    elif value < limits["perigoso"]:
        return "Insalubre", colors[3]
    else:
        return "Perigoso", colors[4]

# Fun√ß√£o para gerar relat√≥rio de qualidade do ar
def generate_air_quality_report(dataframes, param_keys):
    """Gera relat√≥rio de qualidade do ar com base em s√©ries temporais."""
    if not dataframes or not param_keys:
        return None
    
    # Criar DataFrame para relat√≥rio
    report = pd.DataFrame()
    
    # Para cada par√¢metro, calcular estat√≠sticas
    for param_key, df in zip(param_keys, dataframes):
        if df.empty:
            continue
            
        # Dados hist√≥ricos apenas
        hist_data = df[df['type'] == 'historical']
        if hist_data.empty:
            continue
            
        # Estat√≠sticas b√°sicas
        current = hist_data['value'].iloc[-1]
        max_val = hist_data['value'].max()
        min_val = hist_data['value'].min()
        mean_val = hist_data['value'].mean()
        
        # Tend√™ncia (√∫ltimas 24h)
        recent_cutoff = hist_data['time'].max() - pd.Timedelta(hours=24)
        recent_data = hist_data[hist_data['time'] >= recent_cutoff]
        
        if len(recent_data) >= 2:
            first_val = recent_data['value'].iloc[0]
            last_val = recent_data['value'].iloc[-1]
            trend_pct = ((last_val - first_val) / first_val * 100) if first_val > 0 else 0
        else:
            trend_pct = 0
            
        # Categoria atual
        category, color = get_air_quality_category(current, param_key)
        
        # Adicionar ao DataFrame
        param_info = air_quality_params[param_key]
        new_row = pd.DataFrame({
            'param_key': [param_key],
            'param_name': [param_info['nome']],
            'current': [current],
            'min': [min_val],
            'max': [max_val],
            'mean': [mean_val],
            'trend_pct': [trend_pct],
            'category': [category],
            'color': [color],
            'unit': [param_info['unidade']]
        })
        
        report = pd.concat([report, new_row], ignore_index=True)
    
    return report

# Fun√ß√£o principal para gerar an√°lise de qualidade do ar
def generate_air_quality_analysis():
    dataset = "cams-global-atmospheric-composition-forecasts"
    
    # Format dates and times correctly for ADS API
    start_date_str = start_date.strftime('%Y-%m-%d')
    end_date_str = end_date.strftime('%Y-%m-%d')
    
    # Create list of hours in the correct format
    hours = []
    current_hour = start_hour
    while True:
        hours.append(f"{current_hour:02d}:00")
        if current_hour == end_hour:
            break
        current_hour = (current_hour + 3) % 24
        if current_hour == start_hour:  # Evitar loop infinito
            break
    
    # Se n√£o tivermos horas definidas, usar padr√£o
    if not hours:
        hours = ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00']
    
    # Verificar se temos par√¢metros selecionados
    if not selected_param_keys:
        st.error("Selecione pelo menos um par√¢metro para an√°lise.")
        return None
    
    # Preparar request para API
    request = {
        'variable': selected_param_keys,
        'date': f'{start_date_str}/{end_date_str}',
        'time': hours,
        'leadtime_hour': ['0', '24', '48', '72'],  # Incluir previs√µes de at√© 3 dias
        'type': ['forecast'],
        'format': 'netcdf',
        'area': [lat_center + map_width/2, lon_center - map_width/2, 
                lat_center - map_width/2, lon_center + map_width/2]
    }
    
    filename = f'AirQuality_{city}_{start_date}_to_{end_date}.nc'
    
    try:
        with st.spinner('üì• Baixando dados do CAMS...'):
            client.retrieve(dataset, request).download(filename)
        
        ds = xr.open_dataset(filename)
        
        # Verificar vari√°veis dispon√≠veis
        variable_names = list(ds.data_vars)
        st.write(f"Vari√°veis dispon√≠veis: {variable_names}")
        
        # Filtra apenas as vari√°veis que est√£o nos par√¢metros selecionados
        available_params = [var for var in selected_param_keys if var in variable_names]
        
        if not available_params:
            st.error("Nenhum dos par√¢metros selecionados est√° dispon√≠vel nos dados.")
            return None
        
        # Para cada par√¢metro, extrair s√©rie temporal
        timeseries_data = {}
        forecast_data = {}
        
        for param in available_params:
            # Extrair s√©rie temporal
            with st.spinner(f"Extraindo s√©rie temporal para {air_quality_params[param]['nome']}..."):
                ts_df = extract_point_timeseries(ds, lat_center, lon_center, var_name=param)
                
                if not ts_df.empty:
                    timeseries_data[param] = ts_df
                    
                    # Gerar previs√£o
                    with st.spinner(f"Gerando previs√£o para {air_quality_params[param]['nome']}..."):
                        forecast_df = predict_future_values(ts_df, days=3)
                        forecast_data[param] = forecast_df
        
        # Encontrar o munic√≠pio no geodataframe
        municipality_shape = None
        if not ms_shapes.empty:
            city_shape = ms_shapes[ms_shapes['NM_MUN'] == city]
            if not city_shape.empty:
                municipality_shape = city_shape.iloc[0].geometry
        
        # Para o primeiro par√¢metro, criar a anima√ß√£o
        main_param = available_params[0]
        da = ds[main_param]
        
        # Verificar dimens√µes
        st.write(f"Dimens√µes do par√¢metro principal: {da.dims}")
        
        # Identificar dimens√µes temporais
        time_dims = [dim for dim in da.dims if 'time' in dim or 'forecast' in dim]
        
        if not time_dims:
            st.error("N√£o foi poss√≠vel identificar dimens√£o temporal nos dados.")
            return None
        
        # --- Cria√ß√£o da anima√ß√£o ---
        # Identificar frames dispon√≠veis
        if 'forecast_reference_time' in da.dims:
            time_dim = 'forecast_reference_time'
            frames = len(da[time_dim])
        else:
            time_dim = time_dims[0]
            frames = len(da[time_dim])
        
        st.write(f"‚úÖ Total de frames dispon√≠veis: {frames}")
        
        if frames < 1:
            st.error("Erro: Dados insuficientes para anima√ß√£o.")
            return None
        
        # Determinar range de cores
        vmin, vmax = float(da.min().values), float(da.max().values)
        vmin = max(0, vmin - 0.05 * vmin)
        vmax = min(vmax * 1.05, vmax * 2)  # Evitar outliers
        
        # Criar figura
        fig = plt.figure(figsize=(12, 8))
        ax = plt.subplot(1, 1, 1, projection=ccrs.PlateCarree())
        
        # Adicionar features b√°sicas
        ax.coastlines(resolution='10m')
        ax.add_feature(cfeature.BORDERS.with_scale('10m'), linestyle=':')
        ax.add_feature(cfeature.STATES.with_scale('10m'), linestyle=':')
        
        # Adicionar grid
        gl = ax.gridlines(draw_labels=True, linewidth=1, color='gray', alpha=0.5, linestyle='--')
        gl.top_labels = False
        gl.right_labels = False
        
        # Definir extens√£o do mapa
        ax.set_extent([lon_center - map_width/2, lon_center + map_width/2, 
                    lat_center - map_width/2, lat_center + map_width/2], 
                   crs=ccrs.PlateCarree())
        
        # Obter primeiro frame para inicializar
        first_frame_data = None
        first_frame_time = None
        
        if 'forecast_period' in da.dims and 'forecast_reference_time' in da.dims:
            if len(da.forecast_period) > 0 and len(da.forecast_reference_time) > 0:
                first_frame_data = da.isel(forecast_period=0, forecast_reference_time=0).values
                first_frame_time = pd.to_datetime(ds.forecast_reference_time.values[0])
            else:
                first_frame_coords = {dim: 0 for dim in da.dims if len(da[dim]) > 0}
                first_frame_data = da.isel(**first_frame_coords).values
                first_frame_time = datetime.now()
        else:
            first_frame_data = da.isel({time_dim: 0}).values
            first_frame_time = pd.to_datetime(da[time_dim].values[0])
        
        # Garantir formato 2D
        if len(first_frame_data.shape) != 2:
            st.error(f"Erro: Formato de dados inesperado. Shape: {first_frame_data.shape}")
            return None
        
        # Criar mapa de cores
        im = ax.pcolormesh(ds.longitude, ds.latitude, first_frame_data, 
                         cmap=colormap, vmin=vmin, vmax=vmax)
        
        # Adicionar barra de cores
        cbar = plt.colorbar(im, fraction=0.046, pad=0.04)
        cbar.set_label(f"{air_quality_params[main_param]['nome']} ({air_quality_params[main_param]['unidade']})")
        
        # Adicionar t√≠tulo inicial
        title = ax.set_title(f"{air_quality_params[main_param]['nome']} em {city} - {first_frame_time}", fontsize=14)
        
        # Adicionar shape do munic√≠pio selecionado se dispon√≠vel
        if municipality_shape:
            try:
                if hasattr(municipality_shape, '__geo_interface__'):
                    ax.add_geometries([municipality_shape], crs=ccrs.PlateCarree(), 
                                    facecolor='none', edgecolor='red', linewidth=2, zorder=3)
                    
                # Adicionar r√≥tulo do munic√≠pio
                ax.text(lon_center, lat_center, city, fontsize=12, fontweight='bold', 
                       ha='center', va='center', color='red',
                       bbox=dict(facecolor='white', alpha=0.7, boxstyle='round'),
                       transform=ccrs.PlateCarree(), zorder=4)
            except Exception as e:
                st.warning(f"N√£o foi poss√≠vel desenhar o shape do munic√≠pio: {str(e)}")
        
        # Fun√ß√£o de anima√ß√£o
        def animate(i):
            try:
                # Selecionar frame de acordo com a estrutura dos dados
                frame_data = None
                frame_time = None
                
                if 'forecast_period' in da.dims and 'forecast_reference_time' in da.dims:
                    # Determinar √≠ndices v√°lidos
                    fp_idx = min(0, len(da.forecast_period)-1)
                    frt_idx = min(i, len(da.forecast_reference_time)-1)
                    
                    frame_data = da.isel(forecast_period=fp_idx, forecast_reference_time=frt_idx).values
                    frame_time = pd.to_datetime(ds.forecast_reference_time.values[frt_idx])
                else:
                    # Selecionar pelo √≠ndice na dimens√£o de tempo
                    t_idx = min(i, len(da[time_dim])-1)
                    frame_data = da.isel({time_dim: t_idx}).values
                    frame_time = pd.to_datetime(da[time_dim].values[t_idx])
                
                # Atualizar dados
                im.set_array(frame_data.ravel())
                
                # Atualizar t√≠tulo com timestamp
                title.set_text(f"{air_quality_params[main_param]['nome']} em {city} - {frame_time}")
                
                return [im, title]
            except Exception as e:
                st.error(f"Erro no frame {i}: {str(e)}")
                return [im, title]
        
        # Limitar n√∫mero de frames para evitar problemas
        actual_frames = min(frames, 20)  # M√°ximo de 20 frames
        
        # Criar anima√ß√£o
        ani = animation.FuncAnimation(fig, animate, frames=actual_frames, 
                                     interval=animation_speed, blit=True)
        
        # Salvar anima√ß√£o
        gif_filename = f'AirQuality_{city}_{start_date}_to_{end_date}.gif'
        
        with st.spinner('üíæ Salvando anima√ß√£o...'):
            ani.save(gif_filename, writer=animation.PillowWriter(fps=2))
        
        plt.close(fig)
        
        # Gerar relat√≥rio
        report_data = []
        for param in available_params:
            if param in forecast_data:
                report_data.append(forecast_data[param])
                
        with st.spinner('üìä Gerando relat√≥rio de qualidade do ar...'):
            report = generate_air_quality_report(report_data, available_params)
        
        return {
            'animation': gif_filename,
            'timeseries': timeseries_data,
            'forecast': forecast_data,
            'dataset': ds,
            'parameters': available_params,
            'report': report
        }
    
    except Exception as e:
        st.error(f"‚ùå Erro ao processar os dados: {str(e)}")
        st.write("Detalhes da requisi√ß√£o:")
        st.write(request)
        return None

# Fun√ß√£o para desenhar gr√°fico com m√∫ltiplos par√¢metros
# Fun√ß√£o para desenhar gr√°fico com m√∫ltiplos par√¢metros
def plot_multi_parameter_chart(forecasts, params):
    """Gera um gr√°fico com m√∫ltiplos par√¢metros em subplots."""
    if not forecasts or not params:
        return None
        
    # Determinar n√∫mero de subplots necess√°rios
    n_plots = len(params)
    if n_plots == 0:
        return None
    
    # Criar figura com subplots
    fig = plt.figure(figsize=(12, n_plots * 3))
    gs = GridSpec(n_plots, 1, figure=fig)
    
    # Para cada par√¢metro, criar um subplot
    for i, param in enumerate(params):
        if param not in forecasts:
            continue
            
        df = forecasts[param]
        if df.empty:
            continue
            
        ax = fig.add_subplot(gs[i, 0])
        
        # Separar dados hist√≥ricos e previs√£o
        hist_data = df[df['type'] == 'historical']
        forecast_data = df[df['type'] == 'forecast']
        
        # Plotar dados hist√≥ricos
        ax.plot(hist_data['time'], hist_data['value'], 
               marker='o', linestyle='-', color='blue', label='Dados Observados')
        
        # Plotar dados de previs√£o
        if not forecast_data.empty:
            ax.plot(forecast_data['time'], forecast_data['value'], 
                   marker='x', linestyle='--', color='red', label='Previs√£o')
        
        # Configurar eixos
        ax.set_title(f"{air_quality_params[param]['nome']}", fontsize=12)
        ax.set_ylabel(f"{air_quality_params[param]['unidade']}", fontsize=10)
        
        if i == n_plots - 1:  # √öltimo subplot
            ax.set_xlabel('Data/Hora', fontsize=10)
            
        # Formatar datas no eixo x
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m %H:%M'))
        plt.xticks(rotation=45)
        
        # Adicionar legenda e grade
        ax.legend(loc='upper right')
        ax.grid(True, alpha=0.3)
        
        # Adicionar faixas de qualidade do ar
        limits = air_quality_params[param]['limites']
        colors = air_quality_params[param]['cores']
        
        if limits:
            y_min, y_max = ax.get_ylim()
            y_max = max(y_max, limits['perigoso'] * 1.2)
            
            # Desenhar faixas coloridas
            ax.axhspan(0, limits['bom'], alpha=0.1, color=colors[0], label='Bom')
            ax.axhspan(limits['bom'], limits['moderado'], alpha=0.1, color=colors[1])
            ax.axhspan(limits['moderado'], limits['insalubre'], alpha=0.1, color=colors[2])
            ax.axhspan(limits['insalubre'], limits['perigoso'], alpha=0.1, color=colors[3])
            ax.axhspan(limits['perigoso'], y_max, alpha=0.1, color=colors[4])
            
            # Ajustar limites do eixo y
            ax.set_ylim(0, y_max)
    
    plt.tight_layout()
    return fig

# Fun√ß√£o para gerar relat√≥rio detalhado de qualidade do ar
def generate_detailed_report(report_df, forecasts, params):
    """Gera relat√≥rio detalhado com tend√™ncias e previs√µes."""
    if report_df is None or report_df.empty:
        return None
        
    # Criar DataFrame para o relat√≥rio
    report_html = "<div style='padding:10px; background-color:#f8f9fa; border-radius:5px;'>"
    report_html += "<h3>üìã Relat√≥rio de Qualidade do Ar</h3>"
    report_html += f"<p>Munic√≠pio: <b>{city}</b> | Per√≠odo: {start_date} a {end_date}</p>"
    
    # Tabela com situa√ß√£o atual
    report_html += "<h4>Situa√ß√£o Atual dos Par√¢metros</h4>"
    
    # Cabe√ßalho da tabela
    report_html += """
    <table style='width:100%; border-collapse:collapse;'>
    <tr style='background-color:#e9ecef;'>
        <th style='padding:8px; text-align:left; border:1px solid #dee2e6;'>Par√¢metro</th>
        <th style='padding:8px; text-align:center; border:1px solid #dee2e6;'>Valor Atual</th>
        <th style='padding:8px; text-align:center; border:1px solid #dee2e6;'>Categoria</th>
        <th style='padding:8px; text-align:center; border:1px solid #dee2e6;'>Tend√™ncia 24h</th>
    </tr>
    """
    
    # Linhas da tabela
    for _, row in report_df.iterrows():
        # Formata√ß√£o do valor atual
        value_str = f"{row['current']:.4f}"
        if row['current'] < 0.01:
            value_str = f"{row['current']:.2e}"
            
        # Formata√ß√£o da tend√™ncia
        if row['trend_pct'] > 5:
            trend_icon = "‚¨ÜÔ∏è"
            trend_desc = f"+{row['trend_pct']:.1f}%"
            trend_color = "#dc3545"  # vermelho
        elif row['trend_pct'] < -5:
            trend_icon = "‚¨áÔ∏è"
            trend_desc = f"{row['trend_pct']:.1f}%"
            trend_color = "#28a745"  # verde
        else:
            trend_icon = "‚ÜîÔ∏è"
            trend_desc = "Est√°vel"
            trend_color = "#6c757d"  # cinza
            
        # Cor da categoria
        category_color = row['color']
            
        report_html += f"""
        <tr>
            <td style='padding:8px; border:1px solid #dee2e6;'>{row['param_name']}</td>
            <td style='padding:8px; text-align:center; border:1px solid #dee2e6;'>{value_str} {row['unit']}</td>
            <td style='padding:8px; text-align:center; border:1px solid #dee2e6; background-color:{category_color}; color:white;'>{row['category']}</td>
            <td style='padding:8px; text-align:center; border:1px solid #dee2e6; color:{trend_color};'>{trend_icon} {trend_desc}</td>
        </tr>
        """
    
    report_html += "</table>"
    
    # Previs√£o para pr√≥ximos dias
    report_html += "<h4>Previs√£o para os Pr√≥ximos Dias</h4>"
    
    # Para cada par√¢metro, analisar previs√£o
    for param in params:
        if param not in forecasts or param not in air_quality_params:
            continue
            
        df = forecasts[param]
        if df.empty:
            continue
            
        forecast_data = df[df['type'] == 'forecast']
        if forecast_data.empty:
            continue
            
        # Agrupar por dia
        forecast_data['date'] = forecast_data['time'].dt.date
        daily_forecast = forecast_data.groupby('date')['value'].agg(['mean', 'max']).reset_index()
        
        param_name = air_quality_params[param]['nome']
        report_html += f"<p><b>{param_name}</b></p>"
        
        # Mini tabela de previs√£o
        report_html += """
        <table style='width:100%; border-collapse:collapse; margin-bottom:15px;'>
        <tr style='background-color:#e9ecef;'>
            <th style='padding:6px; text-align:left; border:1px solid #dee2e6;'>Data</th>
            <th style='padding:6px; text-align:center; border:1px solid #dee2e6;'>M√©dia</th>
            <th style='padding:6px; text-align:center; border:1px solid #dee2e6;'>M√°ximo</th>
            <th style='padding:6px; text-align:center; border:1px solid #dee2e6;'>Condi√ß√£o</th>
        </tr>
        """
        
        for _, day in daily_forecast.iterrows():
            # Calcular categoria com base no valor m√©dio
            category, color = get_air_quality_category(day['mean'], param)
            
            # Formata√ß√£o dos valores
            mean_str = f"{day['mean']:.4f}"
            max_str = f"{day['max']:.4f}"
            
            if day['mean'] < 0.01:
                mean_str = f"{day['mean']:.2e}"
            if day['max'] < 0.01:
                max_str = f"{day['max']:.2e}"
                
            report_html += f"""
            <tr>
                <td style='padding:6px; border:1px solid #dee2e6;'>{day['date'].strftime('%d/%m/%Y')}</td>
                <td style='padding:6px; text-align:center; border:1px solid #dee2e6;'>{mean_str}</td>
                <td style='padding:6px; text-align:center; border:1px solid #dee2e6;'>{max_str}</td>
                <td style='padding:6px; text-align:center; border:1px solid #dee2e6; background-color:{color}; color:white;'>{category}</td>
            </tr>
            """
            
        report_html += "</table>"
    
    # An√°lise final
    worst_param = None
    worst_category = "Bom"
    
    # Encontrar o pior par√¢metro
    for _, row in report_df.iterrows():
        categories = ["Bom", "Moderado", "Insalubre para grupos sens√≠veis", "Insalubre", "Perigoso"]
        category_index = categories.index(row['category']) if row['category'] in categories else -1
        worst_index = categories.index(worst_category) if worst_category in categories else -1
        
        if category_index > worst_index:
            worst_category = row['category']
            worst_param = row['param_name']
    
    if worst_param:
        report_html += f"""
        <div style='padding:10px; background-color:#f1f8ff; border-left:4px solid #0366d6; margin-top:15px;'>
            <h4>An√°lise Geral da Qualidade do Ar</h4>
            <p>A qualidade do ar em {city} est√° classificada como <b style='color:{report_df[report_df['param_name'] == worst_param]['color'].iloc[0]};'>{worst_category}</b>, 
            principalmente devido aos n√≠veis de <b>{worst_param}</b>.</p>
        """
        
        # Adicionar recomenda√ß√µes com base na categoria
        if worst_category == "Bom":
            report_html += "<p>‚úÖ Condi√ß√µes favor√°veis para atividades ao ar livre.</p>"
        elif worst_category == "Moderado":
            report_html += "<p>‚ö†Ô∏è Pessoas muito sens√≠veis devem considerar limitar atividades prolongadas ao ar livre.</p>"
        elif worst_category == "Insalubre para grupos sens√≠veis":
            report_html += "<p>‚ö†Ô∏è Grupos sens√≠veis (crian√ßas, idosos e pessoas com doen√ßas respirat√≥rias) devem evitar atividades ao ar livre.</p>"
        elif worst_category == "Insalubre":
            report_html += "<p>üö´ Reduzir atividades ao ar livre. Grupos sens√≠veis devem permanecer em ambientes internos.</p>"
        else:  # Perigoso
            report_html += "<p>‚õî Evitar qualquer atividade ao ar livre. Manter janelas fechadas.</p>"
            
        report_html += "</div>"
    
    report_html += "</div>"
    
    return report_html

# Bot√£o para iniciar an√°lise
if st.button("üéûÔ∏è Gerar An√°lise Completa", type="primary"):
    # Verificar se h√° par√¢metros selecionados
    if not selected_params:
        st.error("Selecione pelo menos um par√¢metro para an√°lise.")
    else:
        # Executar an√°lise e obter resultados
        results = generate_air_quality_analysis()
        
        if results:
            # Layout de duas colunas para conte√∫do principal
            col1, col2 = st.columns([3, 2])
            
            with col1:
                st.subheader("üé¨ Anima√ß√£o de Qualidade do Ar")
                main_param = results['parameters'][0]
                param_name = air_quality_params[main_param]['nome']
                st.image(results['animation'], caption=f"{param_name} em {city} ({start_date} a {end_date})")
                
                # Adicionar op√ß√µes para baixar
                with open(results['animation'], "rb") as file:
                    btn = st.download_button(
                        label="‚¨áÔ∏è Baixar Anima√ß√£o (GIF)",
                        data=file,
                        file_name=f"AirQuality_{city}_{start_date}_to_{end_date}.gif",
                        mime="image/gif"
                    )
            
            with col2:
                # Se tivermos apenas um par√¢metro
                if len(results['parameters']) == 1:
                    param = results['parameters'][0]
                    st.subheader(f"üìä S√©rie Temporal: {air_quality_params[param]['nome']}")
                    
                    # Criar gr√°fico
                    fig, ax = plt.subplots(figsize=(10, 6))
                    
                    df_combined = results['forecast'][param]
                    
                    # Dados hist√≥ricos
                    hist_data = df_combined[df_combined['type'] == 'historical']
                    ax.plot(hist_data['time'], hist_data['value'], 
                           marker='o', linestyle='-', color='blue', label='Observado')
                    
                    # Dados de previs√£o
                    forecast_data = df_combined[df_combined['type'] == 'forecast']
                    ax.plot(forecast_data['time'], forecast_data['value'], 
                           marker='x', linestyle='--', color='red', label='Previs√£o')
                    
                    # Formatar eixos
                    ax.set_title(f"{air_quality_params[param]['nome']} em {city}", fontsize=14)
                    ax.set_xlabel('Data/Hora', fontsize=12)
                    ax.set_ylabel(f"{air_quality_params[param]['unidade']}", fontsize=12)
                    
                    # Formatar datas no eixo x
                    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d/%m %H:%M'))
                    plt.xticks(rotation=45)
                    
                    # Adicionar legenda e grade
                    ax.legend()
                    ax.grid(True, alpha=0.3)
                    
                    # Adicionar faixas de qualidade do ar
                    limits = air_quality_params[param]['limites']
                    colors = air_quality_params[param]['cores']
                    
                    y_min, y_max = ax.get_ylim()
                    y_max = max(y_max, limits['perigoso'] * 1.2)
                    
                    ax.axhspan(0, limits['bom'], alpha=0.2, color=colors[0], label='Boa')
                    ax.axhspan(limits['bom'], limits['moderado'], alpha=0.2, color=colors[1], label='Moderada')
                    ax.axhspan(limits['moderado'], limits['insalubre'], alpha=0.2, color=colors[2], label='Insalubre para grupos sens√≠veis')
                    ax.axhspan(limits['insalubre'], limits['perigoso'], alpha=0.2, color=colors[3], label='Insalubre')
                    ax.axhspan(limits['perigoso'], y_max, alpha=0.2, color=colors[4], label='Perigosa')
                    
                    plt.tight_layout()
                    st.pyplot(fig)
                    
                # Se tivermos m√∫ltiplos par√¢metros
                else:
                    st.subheader("üìä Compara√ß√£o de Par√¢metros")
                    
                    # Criar gr√°fico multi-par√¢metros
                    fig_multi = plot_multi_parameter_chart(results['forecast'], results['parameters'])
                    if fig_multi:
                        st.pyplot(fig_multi)
                    else:
                        st.warning("N√£o foi poss√≠vel gerar o gr√°fico comparativo.")
            
            # Relat√≥rio completo abaixo 
            st.subheader("üìë Relat√≥rio Detalhado de Qualidade do Ar")
            
            if results['report'] is not None and not results['report'].empty:
                # Gerar relat√≥rio HTML detalhado
                report_html = generate_detailed_report(
                    results['report'], 
                    results['forecast'], 
                    results['parameters']
                )
                
                if report_html:
                    st.markdown(report_html, unsafe_allow_html=True)
                    
                    # Estat√≠sticas dos par√¢metros
                    with st.expander("üìä Estat√≠sticas Detalhadas"):
                        for param in results['parameters']:
                            if param in results['forecast']:
                                df = results['forecast'][param]
                                hist_data = df[df['type'] == 'historical']
                                
                                if not hist_data.empty:
                                    st.write(f"### {air_quality_params[param]['nome']}")
                                    
                                    # Estat√≠sticas b√°sicas
                                    stats_df = pd.DataFrame({
                                        'Estat√≠stica': ['M√≠nimo', 'M√©dia', 'M√°ximo', 'Desvio Padr√£o'],
                                        'Valor': [
                                            f"{hist_data['value'].min():.6f}",
                                            f"{hist_data['value'].mean():.6f}",
                                            f"{hist_data['value'].max():.6f}",
                                            f"{hist_data['value'].std():.6f}"
                                        ]
                                    })
                                    
                                    st.dataframe(stats_df, hide_index=True)
                                    
                                    # Histograma da distribui√ß√£o
                                    fig, ax = plt.subplots(figsize=(8, 4))
                                    sns.histplot(hist_data['value'], kde=True, ax=ax)
                                    ax.set_title(f"Distribui√ß√£o de {air_quality_params[param]['nome']}")
                                    ax.set_xlabel(f"{air_quality_params[param]['unidade']}")
                                    st.pyplot(fig)
                                    
                                    # Linha horizontal
                                    st.markdown("---")
                
                # Exportar dados
                with st.expander("üíæ Exportar Dados"):
                    # Preparar dados para exporta√ß√£o
                    export_dfs = {}
                    
                    for param in results['parameters']:
                        if param in results['forecast']:
                            param_name = air_quality_params[param]['nome']
                            df = results['forecast'][param].copy()
                            # Renomear colunas para melhor compreens√£o
                            df = df.rename(columns={
                                'value': param_name,
                                'time': 'Data/Hora',
                                'type': 'Tipo'
                            })
                            export_dfs[param_name] = df
                    
                    # Op√ß√µes de par√¢metros para exportar
                    export_param = st.selectbox(
                        "Selecione o par√¢metro para exportar", 
                        list(export_dfs.keys())
                    )
                    
                    if export_param in export_dfs:
                        # Formato de exporta√ß√£o
                        export_format = st.radio(
                            "Formato de exporta√ß√£o",
                            options=["CSV", "Excel", "JSON"],
                            horizontal=True
                        )
                        
                        df_to_export = export_dfs[export_param]
                        
                        if export_format == "CSV":
                            csv = df_to_export.to_csv(index=False).encode('utf-8')
                            st.download_button(
                                label="‚¨áÔ∏è Baixar dados (CSV)",
                                data=csv,
                                file_name=f"{export_param}_{city}_{start_date}_to_{end_date}.csv",
                                mime="text/csv",
                            )
                        elif export_format == "Excel":
                            # Buffer para Excel
                            buffer = io.BytesIO()
                            with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
                                df_to_export.to_excel(writer, sheet_name=export_param, index=False)
                            
                            buffer.seek(0)
                            st.download_button(
                                label="‚¨áÔ∏è Baixar dados (Excel)",
                                data=buffer,
                                file_name=f"{export_param}_{city}_{start_date}_to_{end_date}.xlsx",
                                mime="application/vnd.ms-excel",
                            )
                        else:  # JSON
                            json_str = df_to_export.to_json(orient='records', date_format='iso')
                            st.download_button(
                                label="‚¨áÔ∏è Baixar dados (JSON)",
                                data=json_str,
                                file_name=f"{export_param}_{city}_{start_date}_to_{end_date}.json",
                                mime="application/json",
                            )
                            
                # Op√ß√£o de relat√≥rio em PDF (simulado)
                with st.expander("üìÑ Gerar Relat√≥rio em PDF"):
                    st.info("Esta funcionalidade simularia a gera√ß√£o de um relat√≥rio em PDF completo com os dados analisados.")
                    
                    report_type = st.radio(
                        "Tipo de relat√≥rio",
                        ["Resumido", "Completo", "T√©cnico"],
                        horizontal=True
                    )
                    
                    if st.button("Simular gera√ß√£o de PDF"):
                        with st.spinner("Preparando relat√≥rio..."):
                            st.success(f"Relat√≥rio {report_type} gerado com sucesso! Esta √© uma simula√ß√£o da funcionalidade.")
                            
                            # Mostrar preview do que seria o PDF
                            st.markdown(f"""
                            **Preview do relat√≥rio {report_type}**
                            
                            # Monitoramento de Qualidade do Ar em {city}
                            Per√≠odo: {start_date} a {end_date}
                            
                            ## Par√¢metros Monitorados
                            - {', '.join([air_quality_params[p]['nome'] for p in results['parameters']])}
                            
                            ## Conclus√£o
                            Este relat√≥rio apresenta a an√°lise completa dos par√¢metros de qualidade do ar monitorados.
                            """)

# Adicionar informa√ß√µes na parte inferior
st.markdown("---")
st.markdown("""
### ‚ÑπÔ∏è Sobre os dados
- **Fonte**: Copernicus Atmosphere Monitoring Service (CAMS)
- **Par√¢metros**:
  - **AOD 550nm**: Profundidade √ìptica de Aeross√≥is (indicador de part√≠culas suspensas)
  - **NO‚ÇÇ**: Di√≥xido de Nitrog√™nio (poluente de tr√°fego e ind√∫strias)
  - **SO‚ÇÇ**: Di√≥xido de Enxofre (poluente industrial)
  - **CO**: Mon√≥xido de Carbono (poluente de combust√£o)
  - **O‚ÇÉ**: Oz√¥nio (poluente fotoqu√≠mico)
  - **NO**: √ìxido N√≠trico (precursor de NO‚ÇÇ)
- **Resolu√ß√£o temporal**: 3 horas
- **Atualiza√ß√£o**: Di√°ria

### üìñ Guia de interpreta√ß√£o da qualidade do ar:
| Categoria | Recomenda√ß√£o |
|-----------|--------------|
| **Boa** | Ideal para atividades ao ar livre |
| **Moderada** | Pessoas excepcionalmente sens√≠veis devem considerar limita√ß√£o de esfor√ßo prolongado |
| **Insalubre para grupos sens√≠veis** | Idosos, crian√ßas e pessoas com problemas respirat√≥rios devem limitar esfor√ßo prolongado |
| **Insalubre** | Todos devem reduzir o esfor√ßo prolongado; grupos sens√≠veis devem evitar atividades ao ar livre |
| **Perigosa** | Todos devem evitar qualquer atividade ao ar livre; grupos sens√≠veis devem permanecer em ambiente interno |

Desenvolvido para monitoramento da qualidade do ar no estado de Mato Grosso do Sul - Brasil.
""")
        
